@using FitskedApp.Data
@using FitskedApp.Models
@page "/addnewworkout"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserWorkoutRepository userWorkoutRepo
@inject IUserExerciseRepository userExerciseRepo // We are injecting here to get the methods that will filter exercises based on drop down selections

<h3>Create New Workout</h3>
<EditForm Model="@userworkout" OnValidSubmit="@addWorkout">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="workoutName">Workout Name:</label>
        <InputText id="workoutName" @bind-Value="userworkout.Name" />
    </div>

    <div>
        <label for="workoutType"> Workout Type </label>
        <InputSelect id="workoutType" Value="@selectedWorkoutType" ValueChanged="OnWorkoutTypeChanged">
            <option value="">Select Workout Type</option>
            @foreach (WorkoutType workoutType in Enum.GetValues(typeof(WorkoutType)))
            {
                <option value="@workoutType">@workoutType</option>
            }
        </InputSelect>
    </div>
</EditForm>

@code {
    private WorkoutType? selectedWorkoutType;

    private void OnWorkoutTypeChanged(WorkoutType workoutType)
    {
        selectedWorkoutType = workoutType; // Update the selected workout type
        Console.WriteLine($"Selected Workout Type: {selectedWorkoutType}"); // For debugging
    }



    UserWorkout userworkout = new UserWorkout();
    UserExercise userexercise = new UserExercise();




    public List<Exercise> listOfExercisesPerWorkoutType = new List<Exercise>(); // This will be the resulting list from the first drop down selection. Stored in memory.
    public List<Exercise> listOfExercisePerExerciseType = new List<Exercise>(); // This will be the resulting list from the second drop down selection. Stored in memory.

    
    
    public void addWorkout()
    {
        userWorkoutRepo.addNewWorkout(userworkout);
    }
}
