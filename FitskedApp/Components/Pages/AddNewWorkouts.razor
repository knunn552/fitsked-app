@using FitskedApp.Data
@using FitskedApp.Models
@page "/addnewworkout"
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserWorkoutRepository userWorkoutRepo
@inject IUserExerciseRepository userExerciseRepo // We are injecting here to get the methods that will filter exercises based on drop down selections

<h3>Add Workout</h3>
@* TODO: Will probably eventually need to find a way to insert to EditForms into the same component as the form needs to point to Plan, UserWorkout, and UserExercise *@
@* For that, here is a good starter link: https://github.com/dotnet/aspnetcore/issues/53019*@

<EditForm Model="userExercise">

    <label for="workoutSelection"> Workout Type: </label>
    <InputSelect id="workoutSelection" @bind-Value="userExercise.WorkoutType" @bind-Value:after="ShowExercisesByWorkoutType">
        @foreach (var type in Enum.GetValues(typeof(WorkoutType)))
        {
            <option value="@type">@type</option>
        }
    </InputSelect> <br />

    <h4> Add Exercises </h4>
    <label for="exerciseType"> Exercise Type </label>
    <InputSelect id="exerciseType" @bind-Value="userExercise.ExerciseType" @bind-Value:after="ShowExercisesByExerciseType">
        @foreach (var type in Enum.GetValues(typeof(ExerciseType)))
        {
            <option value="@type">@type</option>
        }
    </InputSelect>

    <label for="exerciseReps"> Reps: </label>
    <InputNumber id="exerciseReps" @bind-Value="userExercise.Repetitions"></InputNumber>

    <label for="exerciseSets"> Sets: </label>
    <InputNumber id="exerciseReps" @bind-Value="userExercise.Sets"></InputNumber>

    <label for="exerciseWeight"> Weight: </label>
    <InputNumber id="exerciseReps" @bind-Value="userExercise.Weight"></InputNumber> @* TODO: Need to put an Easter Egg in the validation/exception handling if weight is above 2000 with message saying "You are not a gorilla. Please select a reasonable weight. *@ 
</EditForm>

<p class="mt-3">Selected Workout Type: @userExercise.WorkoutType</p>


@if(@listOfExercisesByWorkoutType != null && listOfExercisesByWorkoutType.Any())
{
    <h2> Exercises for selected workout type: </h2>
    <ul>
        @foreach (var name in listOfExercisesByWorkoutType)
        {

            <li>@name.Name</li>
            <li>@name.ExerciseType</li>

        }
    </ul>
}

<p class="mt-3">Selected Exercise Type: @userExercise.ExerciseType</p>

@if(listOfExerciseByExerciseType != null && listOfExerciseByExerciseType.Any())
{
    <h2> Exercises for selected Exercise Type </h2>

    <ul>
        @foreach(var exerciseName in listOfExerciseByExerciseType)
        {
            <li> @exerciseName.Name</li>
            <li> @exerciseName.ExerciseType</li>
        }
    </ul>
}

@code {
    private UserExercise userExercise = new();
    private UserWorkout userworkout = new();


    public List<Exercise> listOfExercisesByWorkoutType = new(); // This will be the resulting list from the first drop down selection. Stored in memory.


    public List<Exercise> listOfExerciseByExerciseType = new List<Exercise>(); // This will be the resulting list from the second drop down selection. Stored in memory.

    public async Task ShowExercisesByWorkoutType() // This is an IO Bound task so we are using Asynchronous programming to free up a thread will the IO Bound task completes
    {
        if(userExercise.WorkoutType != null)
        {
            listOfExercisesByWorkoutType = await userExerciseRepo.GetExercisesBasedOnWorkoutType(userExercise.WorkoutType);
            Console.WriteLine($"Number of exercises fetched: {listOfExercisesByWorkoutType.Count}");
        }
    }

    public void ShowExercisesByExerciseType()
    {
        if(userExercise.ExerciseType != null)
        {
            listOfExerciseByExerciseType = userExerciseRepo.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, userExercise.ExerciseType);
        }

    }
}
