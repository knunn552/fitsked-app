@using FitskedApp.Data
@using FitskedApp.Models
@page "/addnewworkout"
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserWorkoutRepository userWorkoutRepo
@inject IUserExerciseRepository userExerciseRepo // We are injecting here to get the methods that will filter exercises based on drop down selections

<h3>Select Workout Type</h3>
 

@* TODO: Will probably eventually need to find a way to insert to EditForms into the same component as the form needs to point to Plan, UserWorkout, and UserExercise *@
@* For that, here is a good starter link: https://github.com/dotnet/aspnetcore/issues/53019*@

<EditForm Model="userExercise">

    <label for="workoutSelection"> Select Workout Type: </label>
    <InputSelect id="workoutSelection" @bind-Value="userExercise.WorkoutType" @bind-Value:after="ShowExercisesByWorkoutType">
        @foreach (var type in Enum.GetValues(typeof(WorkoutType)))
        {
            <option value="@type">@type</option>
        }
    </InputSelect>

    <label for="exerciseType"> Select Exercise Type </label>
    <InputSelect id="exerciseType" @bind-Value=userExercise.Exercise>

    </InputSelect>
</EditForm>

<p class="mt-3">Selected Workout Type: @userExercise.WorkoutType</p>

@if(@listOfExercisesByWorkoutType != null && listOfExercisesByWorkoutType.Any())
{
    <h2> Exercises for selected workout type: </h2>
    <ul>
        @foreach (var name in listOfExercisesByWorkoutType)
        {

            <li>@name.Name</li>
            <li>@name.ExerciseType</li>

        }
    </ul>
}

@code {
    private UserExercise userExercise = new();
    private UserWorkout userworkout = new();


    public List<Exercise> listOfExercisesByWorkoutType = new(); // This will be the resulting list from the first drop down selection. Stored in memory.


    public List<Exercise> listOfExerciseByExerciseType = new List<Exercise>(); // This will be the resulting list from the second drop down selection. Stored in memory.

    public async Task ShowExercisesByWorkoutType() // This is an IO Bound task so we are using Asynchronous programming to free up a thread will the IO Bound task completes
    {
        if(userExercise.WorkoutType != null)
        {
            listOfExercisesByWorkoutType = await userExerciseRepo.GetExercisesBasedOnWorkoutType(userExercise.WorkoutType);
            Console.WriteLine($"Number of exercises fetched: {listOfExercisesByWorkoutType.Count}");
        }
    }
}
