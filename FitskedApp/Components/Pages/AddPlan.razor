@using FitskedApp.Data
@using FitskedApp.Models
@page "/add-plan"
@inject IUserPlanRepository PlanRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@rendermode InteractiveServer

<h3 class="d-flex justify-content-center">Add a New Plan</h3>

<p class="text-center">
    We recommend a six-month plan. There will be enough variety in your weekly workouts that
    six months should provide a good balance between stashing away the time needed to create a new plan
    and maintaining variety in your day-to-day workouts during the week.
</p>

<EditForm Model="@newPlan" OnValidSubmit="@AddNewPlan" FormName="AddPlanForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="d-flex justify-content-center">
        <label for="PlanName">Plan Name:</label>
        <InputText class="rounded-2" id="PlanName" @bind-Value="newPlan.Name" />
    </div>

    <div class="d-flex justify-content-center">
        <label for="DurationMonths">Duration (Months):</label>
        <InputNumber class="rounded-2" id="DurationMonths" @bind-Value="newPlan.Duration" />
    </div>

    <div class="d-flex justify-content-center">
        <button href="/workout" class="rounded-2" type="submit">Create your week</button>
    </div>
</EditForm>

@code {
    private Plan newPlan = new Plan();

    private async Task<int> AddNewPlan()
    {
        // Use Task<AuthenticationState> to safely retrieve the authenticated user info
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user is authenticated and get the UserId
        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            // Assign the UserId to the new plan
            if (!string.IsNullOrEmpty(userId))
            {
                newPlan.ApplicationUserId = userId; // Assuming Plan.UserId is a string
            }

            // Add the new plan to the repository
            int planId = await PlanRepository.AddPlan(newPlan);

            // Reset the form after submission
            newPlan = new Plan();

            // Navigate to the workout page for the newly created plan
            NavManager.NavigateTo($"/workout/{planId}");

            return planId;
        }

        return 0;
    }
}
