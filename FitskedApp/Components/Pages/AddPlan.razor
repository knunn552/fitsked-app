@using FitskedApp.Data
@using FitskedApp.Models
@page "/add-plan"
@rendermode InteractiveServer
@inject IUserPlanRepository planRepository
@inject IUserExerciseRepository userExerciseRepository
@inject IUserWorkoutRepository userWorkoutRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext ApplicationDbContext
@inject NavigationManager NavManager


<h3 class="d-flex justify-content-center"> Create Plan </h3>

<EditForm Model="@plan">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="d-flex justify-content-center">
        <label for="PlanName">Plan Name:</label>
        <InputText class="rounded-2" id="PlanName" @bind-Value="plan.Name" />
    </div>
</EditForm>

<div class="row border border-dark p-3">
    @foreach (var day in daysOfWeek)
    {
        <div class="col text-center" @onclick="() => { if (!displayDayViewWorkout) UserSelectsDay(day); }">
            <h5> @day </h5>
            <div class="workout-body border-top pt-3 row">
                <label> Exercise Details (for selected day): </label>
                <p> @GetWorkoutSummary(day)</p>
            </div>
        </div>
    }
</div>

<button @onclick="AddNewPlan"> Add Plan </button>

@if (displayDayViewWorkout)
{
    <div class="day-view-modal">
        <h5>@selectedDay</h5>

        <form>
            @for (int i = 0; i < numberOfExercisesInWorkout; i++)
            {
                var j = i;
                if (j >= exerciseListForSelectedDay.Count)
                {
                    var userExercise = new UserExercise
                        {
                            ExerciseId = 1
                        };

                    exerciseListForSelectedDay.Add(userExercise);
                }

                <div>
                    <label for="name"> Exercise Name: </label>
                    <input type="text" id="name" @bind="exerciseListForSelectedDay[j].Name" />

                    <label for="sets"> Sets: </label>
                    <input type="number" id="sets" @bind="exerciseListForSelectedDay[j].Sets" />

                    <label for="reps"> Reps: </label>
                    <input type="number" id="reps" @bind="exerciseListForSelectedDay[j].Repetitions" />

                    <label for="weight"> Weight: </label>
                    <input type="number" id="weight" @bind="exerciseListForSelectedDay[j].Weight" />

                    @* Need to have a method that converts lbs to kgs as these two measurements are very common across the fitness industry*@
                </div>
            }
        </form>

        <button class="btn btn-primary mt-3" @onclick="SaveWorkout">Save Workout to In-Memory Dictionary/Return to Week View.</button> @* displayWeekView changed to false by the saveWorkout method*@
    </div>
}

@code {
    private string[] daysOfWeek = new string[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

    private Plan plan = new Plan();

    private UserExercise userExercise = new();

    private int numberOfExercisesInWorkout = 7; // I want make the number of exercises any given workout to 7 (This is an opinionated number I'm setting for my app based on my beliefs on how to structure of a typical workout should be. I want to app to provide users with structure so they don't have to think about how many exercises they should have in they're workout.

    private Dictionary<string, List<UserExercise>> DictionaryOfListOfUserExerciseForSelectedDay = new();

    private string selectedDay = string.Empty;

    private List<UserExercise> exerciseListForSelectedDay = new(); // We already have a list of userexercise in dictionary, I don't think we need this one but we'll leave it in here for context

    private List<UserWorkout> workoutListForCurrentPlan = new(); 

    private bool displayDayViewWorkout = false;

    protected override void OnInitialized()
    {
        foreach (var day in daysOfWeek)
        {
            if (!DictionaryOfListOfUserExerciseForSelectedDay.ContainsKey(day))
            {
                DictionaryOfListOfUserExerciseForSelectedDay[day] = new List<UserExercise>();
            }
        }
    }

    private void UserSelectsDay(string day)
    {
        selectedDay = day;
        exerciseListForSelectedDay = DictionaryOfListOfUserExerciseForSelectedDay[day];
        displayDayViewWorkout = true;
    }

    private void SaveWorkout()
    {
        DictionaryOfListOfUserExerciseForSelectedDay[selectedDay] = exerciseListForSelectedDay;

        UserWorkout userWorkout = new();
        userWorkout.UserExercises = exerciseListForSelectedDay;
        workoutListForCurrentPlan.Add(userWorkout);

        displayDayViewWorkout = false;
    }

    private string GetWorkoutSummary(string day)
    {
        if (DictionaryOfListOfUserExerciseForSelectedDay.ContainsKey(day))
        {
            var exercises = DictionaryOfListOfUserExerciseForSelectedDay[day];
            if (exercises.Count == 0)
            {
                return "You haven't added any workouts here yet. Are you taking an off day?";
            }
            string summary = "";
            foreach (UserExercise userExercise in exercises)
            {
                summary += $"{userExercise.Name} ({userExercise.Sets} x {userExercise.Repetitions}) - {userExercise.Weight}|";
            }
            return summary.TrimEnd(' ', '|');
        }
        return "You haven't added any workouts here yet. Are you taking an off day?";
    }

    private async Task AddNewPlan()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                plan.ApplicationUserId = userId;
            }

            using var transaction = await ApplicationDbContext.Database.BeginTransactionAsync();
            try
            {
                int planId = await planRepository.AddPlan(plan);  // Persist plan

                foreach (UserWorkout userworkout in workoutListForCurrentPlan)
                {
                    userworkout.PlanId = plan.Id;  // Associate each workout with the PlanId
                    await userWorkoutRepository.AddWorkout(userworkout); 

                    foreach (UserExercise userExercise in userworkout.UserExercises)
                    {
                        userExercise.UserWorkoutId = userworkout.Id;  // Link exercise to workout
                        await userExerciseRepository.AddUserExercise(userExercise);  // Persist exercise
                    }
                }

                await transaction.CommitAsync();  // Commit transaction to persist all data

                plan = new Plan();  // Reset the plan for a new creation cycle
                NavManager.NavigateTo($"/");  // Navigate to the homepage or a confirmation page
            }
            catch (Exception e)
            {
                await transaction.RollbackAsync();  // Rollback in case of any error
                throw new Exception($"Something went wrong with the database transaction: {e.Message}");
            }
        }
    }

}
