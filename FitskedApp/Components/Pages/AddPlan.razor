@page "/add-plan"
@using FitskedApp.DTO
@using FitskedApp.Data
@using FitskedApp.Models
@using FitskedApp.Utilities
@using FitskedApp.Data.Repository
@using FitskedApp.Data.Service
@rendermode InteractiveServer
@inject IUserPlanRepository planRepository
@inject IUserExerciseRepository userExerciseRepository
@inject IUserWorkoutRepository userWorkoutRepository
@inject IExerciseService exerciseService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext ApplicationDbContext
@inject NavigationManager NavManager
@inject IUserService identityUserService
@inject NavigationLinks NavigationLinks

<PageTitle> Add Plan </PageTitle>


    <div class="@((displayDayViewWorkout ? "blurred" : ""))">
        <div class="d-flex justify-content-center">
            <form>
                <div class="col-12 mb-3">
                    <label class="text-black mt-2 pt-2 d-flex justify-content-center poppins-medium" for="PlanName">Plan Name</label>
                <input class="form-control mt-1 w-100 rounded-pill inner-input-shadow border-3 border border-warning" type="text" id="PlanName" @bind="plan.Name" />
                </div>
            </form>
        </div>

        <div class="row border-4 rounded-div border border-warning p-3 bg-white w-auto mb-2  body-box-shadow">
            @foreach (var day in daysOfWeek)
            {
                <div class="col text-center mt-2 mb-2 m-lg-2 day-card rounded-div mr-1 rounded-div border border-3 border-danger ps-2 pe-2" @onclick="() => { if (!displayDayViewWorkout) UserSelectsDay(day);}">
                    <h5 class="mt-2 poppins-medium"> @day </h5>
                <hr />
                    <div class="pt-1">
                        <p class="poppins-bold">  @GetWorkoutTypeByDay(day) </p>  
                    <div  class="rounded-div">
                    <table class="table table-striped table-bordered table-sm table-extra-small-font">
                        <thead>
                            <tr>
                                <th scope="col">Exercise</th>
                                <th scope="col">Sets</th>
                                <th scope="col">Reps</th>
                                <th scope="col">Weight</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(UserExercise userExercise in DictionaryOfListOfUserExerciseForSelectedDay[@day])
                            {
                                <tr>
                                    <td> @userExercise.Name </td>
                                    <td> @userExercise.Sets </td>
                                    <td> @userExercise.Repetitions </td>
                                    <td> @userExercise.Weight </td>
                                </tr>
                            }               
                        </tbody>
                    </table>
                    </div>
                        <p class="poppins-medium exercise-summary-font"> @GetWorkoutSummary(day)</p>
                    </div>
                </div>
            }
        </div>

    <div class="d-flex justify-content-center mt-3">
        <button class="rounded-pill w-25 mb-2 poppins-medium border border-3 border-danger bg-white p-2 main-button" @onclick="NavigationLinks.GoToViewPlansPage"> My Plans </button>
    </div>

    <div class="d-flex justify-content-center mt-3">
        <button class="rounded-pill w-25 mb-2 poppins-medium border border-3 border-danger bg-white p-2 main-button" @onclick="() => { if (!displayDayViewWorkout) AddNewPlan();}"> Save Plan </button>
    </div>

    <div class="d-flex justify-content-center pt-4">
        <p class="poppins-medium">
            <span class="poppins-bold" style="color:green">TIP:</span> If you're time-crunched, save your plan and complete it later in
            <span class="poppins-bold"> My Plans </span>.
            <br />
            Before clicking "Save Plan," be sure to create a filler exercise for each day by clicking each day and selecting "Save Workout."
        </p>
    </div>
    

    @if(displayBlankPlanError)
    {
        <div class="d-flex justify-content-center mt-3">
            <p class="alert-warning"> Give your plan some identity—add a name! </p>
        </div>
    }

    @if (displayUnselectedWorkoutDays)
    {
        
        @foreach(var day in listToTrackSelectedDays)
        {
            <div class="d-flex justify-content-center mt-3">
                <p class="alert-warning"> Don’t skip @day—add a workout, even if it’s just a filler or rest day! </p>
            </div>
        }
    }
</div>






@if(displayDayViewWorkout)
{
    <div class="overlay">
        <div class="d-flex justify-content-center">
            <div class="bg-white rounded-div border border-4 border-danger shadow-sm mb-3 mt-4 day-view-modal" style="width:90%">
                <div class="d-flex justify-content-center">
                    <h5 class="mt-2 poppins-bold">@selectedDay</h5>
                </div>
                <hr class="border border-2 border-danger" />
                <div class="container d-flex justify-content-center">
                    <EditForm Model="userExercise">
                        <DataAnnotationsValidator />

                        @* <label for="workoutType"> Workout Type: </label> *@
                        <div class="d-flex justify-content-center">
                            @if ((userSelectedWorkoutTypeInDayView == false) && (DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[selectedDay] == 0))
                            {
                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height justify-content-center d-flex w-50 text-center blinking-border"
                                             id="workoutType"
                                             @bind-Value="userExercise.WorkoutType"
                                             @bind-Value:after="() => FilterExercisesByWorkoutTypeAsync(selectedDay)">

                                    @foreach (var type in Enum.GetValues(typeof(WorkoutType)).Cast<WorkoutType>().Take(3))
                                    {
                                        if (type == WorkoutType.FillerValue)
                                        {
                                            <option value="@type" disabled selected hidden>@StringValuesForWorkoutType[type]</option>
                                        }
                                        else
                                        {
                                            <option value="@type">@StringValuesForWorkoutType[type]</option>
                                        }
                                    }
                                </InputSelect>
                            }
                            else
                            {
                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height justify-content-center d-flex w-50 text-center"
                                             id="workoutType"
                                             @bind-Value="userExercise.WorkoutType"
                                             @bind-Value:after="() => FilterExercisesByWorkoutTypeAsync(selectedDay)">

                                    @foreach (var type in Enum.GetValues(typeof(WorkoutType)).Cast<WorkoutType>().Take(3))
                                    {
                                        if (type == WorkoutType.FillerValue)
                                        {
                                            <option value="@type" disabled selected hidden>@StringValuesForWorkoutType[type]</option>
                                        }
                                        else
                                        {
                                            <option value="@type">@StringValuesForWorkoutType[type]</option>
                                        }
                                    }
                                </InputSelect>
                            }
                            
                        </div>
                        <br />
                        @for (int i = 0; i < NumberOfUserExercisesInWorkoutForSelectedDay[selectedDay]; i++)
                        {
                            var j = i;
                            if (j >= listOfUserExercisesInSelectedDay.Count)
                            {
                                listOfUserExercisesInSelectedDay.Add(new UserExercise());
                            }

                            <div class="d-flex justify-content-center mb-2">
                                @if ((userSelectedExerciseTypeInDayView == false) && (DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[selectedDay] == 1))
                                {
                                    @if (userSelectedExerciseInDayViewForVideoIconAppearance == true)
                                    {
                                        <a href="@listOfUserExercisesInSelectedDay[j].VideoUrl" target="_blank" class="text-decoration-none col-1 d-flex justify-content-center align-items-center">
                                            <i class="fa-solid fa-video fa-lg "></i>
                                        </a>
                                        <!-- We will need to create a function that gets the hyperlink for an exercise based on the exercise binding j and the selected day-->
                                    }

                                    <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-3 text-center blinking-border"
                                                 id="exerciseType"
                                                 @bind-Value="listOfUserExercisesInSelectedDay[j].ExerciseType"
                                                 @bind-Value:after="() => GetListOfIndividualExercisesFromListOfExerciseType(j,selectedDay)">

                                        @foreach (var type in Enum.GetValues(typeof(ExerciseType)).Cast<ExerciseType>().Take(4))
                                        {
                                            if (type == ExerciseType.FillerValue)
                                            {
                                                <option value="@type" disabled selected hidden>@StringValuesForExerciseType[type]</option>
                                            }
                                            else
                                            {
                                                <option value="@type">@StringValuesForExerciseType[type]</option>
                                            }
                                        }
                                    </InputSelect>  
                                }
                                else
                                {
                                    @if (userSelectedExerciseInDayViewForVideoIconAppearance == true)
                                    {
                                        <a href="@listOfUserExercisesInSelectedDay[j].VideoUrl" target="_blank" class="text-decoration-none col-1 d-flex justify-content-center align-items-center">
                                            <i class="fa-solid fa-video fa-lg "></i>
                                        </a>
                                    }
                                    
                                    <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-3 text-center d-flex align-items-center"
                                                 id="exerciseType"
                                                 @bind-Value="listOfUserExercisesInSelectedDay[j].ExerciseType"
                                                 @bind-Value:after="() => GetListOfIndividualExercisesFromListOfExerciseType(j,selectedDay)">

                                        @foreach (var type in Enum.GetValues(typeof(ExerciseType)).Cast<ExerciseType>().Take(4))
                                        {
                                            if (type == ExerciseType.FillerValue)
                                            {
                                                <option value="@type" disabled selected hidden>@StringValuesForExerciseType[type]</option>
                                            }
                                            else
                                            {
                                                <option value="@type">@StringValuesForExerciseType[type]</option>
                                            }
                                        }
                                    </InputSelect>
                                }


                                @if ((userSelectedExerciseInDayView == false) && (DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[selectedDay] == 2))
                                {
                                    <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-4 text-center blinking-border d-flex align-items-center" id="exerciseName" @bind-Value="listOfUserExercisesInSelectedDay[j].Name" @bind-Value:after="() => BindValuesFromDtoToUserExercise(listOfUserExercisesInSelectedDay[j],listOfUserExercisesInSelectedDay[j].Name,listOfExercisesByWorkoutType,selectedDay)">
                                        <option value="" disabled selected> -- Exercise -- </option>
                                        @foreach (var exercise in listOfUserExercisesInSelectedDay[j].FilteredExercises)
                                        {
                                            <option value="@exercise.Name">@exercise.Name</option>
                                        }
                                    </InputSelect>
                                }
                                else
                                {
                                    <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-4 text-center d-flex align-items-center" id="exerciseName" @bind-Value="listOfUserExercisesInSelectedDay[j].Name" @bind-Value:after="() => BindValuesFromDtoToUserExercise(listOfUserExercisesInSelectedDay[j],listOfUserExercisesInSelectedDay[j].Name,listOfExercisesByWorkoutType,selectedDay)">
                                        <option value="" disabled selected> -- Exercise -- </option>
                                        @foreach (var exercise in listOfUserExercisesInSelectedDay[j].FilteredExercises)
                                        {
                                            <option value="@exercise.Name">@exercise.Name</option>
                                        }
                                    </InputSelect>
                                }


                                <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-1 text-center d-flex align-items-center" id="sets" @bind-Value="listOfUserExercisesInSelectedDay[j].Sets">
                                        <option value="" disabled selected> -- Sets -- </option>
                                        @foreach (var setNumber in ListOfSets)
                                        {
                                            <option value="@setNumber">@setNumber</option>
                                        }
                                    </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-1 text-center d-flex align-items-center" id="reps" @bind-Value="listOfUserExercisesInSelectedDay[j].Repetitions">
                                        <option value="" disabled selected> -- Reps -- </option>
                                        @foreach (var repNumber in ListOfReps)
                                        {
                                            <option value="@repNumber">@repNumber</option>
                                        }
                                    </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-2 text-center d-flex align-items-center" id="weight" @bind-Value="listOfUserExercisesInSelectedDay[j].Weight">
                                        <option value="" disabled selected> -- Weight -- </option>
                                        @foreach (var weightNumber in ListOfWeight)
                                        {
                                            <option value="@weightNumber">@weightNumber lbs.</option>
                                        }
                                    </InputSelect>

                                @if ((j > 0) && (j == NumberOfUserExercisesInWorkoutForSelectedDay[selectedDay] - 1))
                                {
                                    <button class=" end-0 me-5 mt-2 rounded-pill border border-2 border-danger poppins-medium bg-white user-exercise-select-height col-2" @onclick="() => RemoveAdditionalExerciseFromWorkout(selectedDay)">
                                        Remove
                                    </button>
                                }
                            </div>
                        }
                        <div>
                            <button class="mt-3 rounded-pill mb-4 border border-2 border-danger poppins-medium bg-white main-button p-2" @onclick="() =>  AddAdditionalExerciseToWorkout(selectedDay)">
                                Add Exercise
                            </button>
                        </div>

                        <div class="d-flex justify-content-center">
                            <button class="mt-3 rounded-pill mb-4 border border-2 border-danger poppins-medium bg-white main-button p-2" @onclick="SaveUserWorkoutToInMemoryListOfUserWorkouts">Add Workout</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string[] daysOfWeek = new string[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
    private List<string> listToTrackSelectedDays = new List<string> { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };


    private Plan plan = new();
    private UserExercise userExercise = new();
    private int numberOfExercisesInWorkout = 1;
    private Dictionary<string, List<UserExercise>> DictionaryOfListOfUserExerciseForSelectedDay = new();
    private string selectedDay = string.Empty;
    private List<UserExercise> listOfUserExercisesInSelectedDay = new();
    private List<UserWorkout> workoutListForCurrentPlan = new();

    private bool displayDayViewWorkout = false;
    private bool displayUnselectedWorkoutDays = false;
    private bool displayBlankPlanError = false;
    private bool userHasEnteredPlanName = false;

    private bool userSelectedWorkoutTypeInDayView = false;
    private bool userSelectedExerciseTypeInDayView = true;
    private bool userSelectedExerciseInDayView = true;
    private bool userSelectedExerciseInDayViewForVideoIconAppearance = false;

    public List<ExerciseDTO> listOfExercisesByWorkoutType = new();
    private static readonly Dictionary<WorkoutType, string> StringValuesForWorkoutType = new()
    {
            {WorkoutType.FillerValue, " -- Workout Type -- "},
            {WorkoutType.UpperBodyStrength, "Upper Body" },
            {WorkoutType.LowerBodyStrength, "Lower Body" }
    };

    private static readonly Dictionary<ExerciseType, string> StringValuesForExerciseType = new()
    {
        {ExerciseType.FillerValue, " -- Exercise Type -- "},
        {ExerciseType.Core, "Core"},
        {ExerciseType.Secondary, "Secondary"},
        {ExerciseType.Accessory, "Accessory"}
    };

    public WorkoutType workoutType = new();

    private Dictionary<string, int> DictionaryStoringListPositionOfSelectedDay = new Dictionary<string, int>
    {
        { "Sunday", 0 },
        { "Monday", 1 },
        { "Tuesday", 2 },
        { "Wednesday", 3 },
        { "Thursday", 4 },
        { "Friday", 5 },
        { "Saturday", 6 }
    };

    public  Dictionary<string, int> NumberOfUserExercisesInWorkoutForSelectedDay = new Dictionary<string, int>
    {
        { "Sunday", 1},
        { "Monday", 1 },
        { "Tuesday", 1},
        { "Wednesday", 1},
        { "Thursday", 1 },
        { "Friday", 1},
        { "Saturday", 1}
    };

    public Dictionary<string, int> DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff  = new Dictionary<string, int>
    {
        { "Sunday", 0},
        { "Monday", 0},
        { "Tuesday", 0},
        { "Wednesday", 0},
        { "Thursday", 0},
        { "Friday", 0},
        { "Saturday", 0}
    };

    private void AddAdditionalExerciseToWorkout(string day)
    {
        if (NumberOfUserExercisesInWorkoutForSelectedDay[day] < 8)
        {
            NumberOfUserExercisesInWorkoutForSelectedDay[day] += 1;
            StateHasChanged();
        }
    }

    private void RemoveAdditionalExerciseFromWorkout(string day)
    {
        NumberOfUserExercisesInWorkoutForSelectedDay[day] -= 1;
        listOfUserExercisesInSelectedDay.RemoveAt(listOfUserExercisesInSelectedDay.Count - 1);
        StateHasChanged();  
    }

    private List<int> ListOfSets = ListOfNumberHelper.GenerateListOfNumbers(1, 10, 1);
    private List<int> ListOfReps = ListOfNumberHelper.GenerateListOfNumbers(2, 20, 2);
    private List<int> ListOfWeight = ListOfNumberHelper.GenerateListOfNumbers(0, 405, 5);

    protected override async Task OnInitializedAsync()
    {
        foreach (var day in daysOfWeek)
        {
            if (!DictionaryOfListOfUserExerciseForSelectedDay.ContainsKey(day))
            {
                DictionaryOfListOfUserExerciseForSelectedDay[day] = new List<UserExercise>();
            }
        }

        for(int i = 0; i < 7; i++)
        {
            var j = i;
            UserWorkout newWorkout = new UserWorkout();
            workoutListForCurrentPlan.Add(newWorkout);
        }
    }

    private void UserSelectsDay(string day)
    {
        selectedDay = day;
        listOfUserExercisesInSelectedDay = DictionaryOfListOfUserExerciseForSelectedDay[day];
        displayDayViewWorkout = true;
        listToTrackSelectedDays.RemoveAll(e => e.Equals(selectedDay));

    }

    private void SaveUserWorkoutToInMemoryListOfUserWorkouts()
    {
        if (DictionaryStoringListPositionOfSelectedDay.ContainsKey(selectedDay))
        {
            DictionaryOfListOfUserExerciseForSelectedDay[selectedDay] = listOfUserExercisesInSelectedDay;

            int dayIndex = DictionaryStoringListPositionOfSelectedDay[selectedDay];


            workoutListForCurrentPlan.RemoveAt(dayIndex);

            UserWorkout userWorkout = new UserWorkout
                {
                    PlanId = plan.Id,
                    UserExercises = listOfUserExercisesInSelectedDay
                };

            workoutListForCurrentPlan.Insert(dayIndex, userWorkout);
            displayDayViewWorkout = false;
            userSelectedWorkoutTypeInDayView = false;
            userSelectedExerciseTypeInDayView = true;
            userSelectedExerciseInDayView = true;
            // will most likely need to do something with this userSelectedExerciseInDayViewForVideoIconAppearance
            // Will probably need to keep track of it per day.
            StateHasChanged();
        }
    }

    public string GetWorkoutTypeByDay(string day)
    {
        if (DictionaryOfListOfUserExerciseForSelectedDay.TryGetValue(day, out var userWorkout) && userWorkout?.Any() == true)
        {
            var userExercise = userWorkout.FirstOrDefault();
            if (userExercise != null)
            {
                var enumValue = userExercise.WorkoutType;
                switch (enumValue)
                {
                    case WorkoutType.UpperBodyStrength:
                        return "Upper Body";

                    case WorkoutType.LowerBodyStrength:
                        return "Lower Body";

                    default:
                        return "Nothing going on today";
                }
            }
        }
        return "Workout Type Unselected";
    }

    private string GetWorkoutSummary(string day)
    {
        if (DictionaryOfListOfUserExerciseForSelectedDay.TryGetValue(day, out var exercises) && exercises.Any())
        {
            return "";
        }
        return "No Exercises Added.";
    }

    private async Task AddNewPlan()
    {
        CheckIfPlanNameHasValue(plan);
        if(userHasEnteredPlanName)
        {
            if(listToTrackSelectedDays.Count == 0)
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity?.IsAuthenticated == true)
                {
                    var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                    if (!string.IsNullOrEmpty(userId))
                    {
                        plan.ApplicationUserId = userId;
                    }

                    var transaction = await ApplicationDbContext.Database.BeginTransactionAsync();
                    try
                    {
                        int planId = await planRepository.AddPlan(plan);

                        await userWorkoutRepository.PersistListOfUserWorkoutsToDatabaseAsync(workoutListForCurrentPlan, planId);

                        await transaction.CommitAsync();
                        plan = new Plan();
                        NavigationLinks.GoToViewPlansPage();
                    }
                    catch (Exception e)
                    {
                        await transaction.RollbackAsync();
                        throw new Exception($"Something went wrong with the database transaction: {e.Message}");
                    }
                }
            }
            else
            {
                displayUnselectedWorkoutDays = true;
            }
        }
        else
        {
            displayBlankPlanError = true;
            CheckIfUserHasCreatedWorkoutForEveryDay(listToTrackSelectedDays);
        }
    }

    public void CheckIfPlanNameHasValue(Plan plan)
    {
        if(plan.Name != null)
        {
            userHasEnteredPlanName = true;
        }
    }

    public void CheckIfUserHasCreatedWorkoutForEveryDay(List<string> selectedDays)
    {
        if(selectedDays.Count != 0)
        {
            displayUnselectedWorkoutDays = true;
        }
    }



    public async Task FilterExercisesByWorkoutTypeAsync(string day)
    {
        userSelectedWorkoutTypeInDayView = true;
        userSelectedExerciseTypeInDayView = false;

        if (DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[day] < 3)
        {
            DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[day]++;
        }


        listOfExercisesByWorkoutType = await exerciseService.GetExerciseListAsync(userExercise.WorkoutType);
        foreach (var exercise in listOfUserExercisesInSelectedDay)
        {
            exercise.FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, exercise.ExerciseType);
        }

        StateHasChanged();
    }




    public async Task GetListOfIndividualExercisesFromListOfExerciseType(int index, string day)
    {
        userSelectedExerciseTypeInDayView = true;
        userSelectedExerciseInDayView = false;
        if (DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[day] < 3)
        {
            DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[day]++;
        }

        var selectedExerciseType = listOfUserExercisesInSelectedDay[index].ExerciseType;
        listOfUserExercisesInSelectedDay[index].FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, selectedExerciseType);
        await InvokeAsync(StateHasChanged);
    }

    public void PutExerciseIdInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
        userExercise.ExerciseId = filteredExercise.ExerciseId;
    }

    public void PutWorkoutTypeInUserExerciseBasedOnName(UserExercise userExercise,string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
        userExercise.WorkoutType = filteredExercise.WorkoutType;
    }

    public void PutExerciseTypeInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault(); // Really this should be put into its own method
        userExercise.ExerciseType = filteredExercise.ExerciseType;
    }

    public void PutVideoUrlInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault(); // Really this should be put into its own method
        userExercise.VideoUrl = filteredExercise.VideoUrl;
    }


    public void BindValuesFromDtoToUserExercise(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn,string day)
    {
        userSelectedExerciseInDayView = true;
        userSelectedExerciseInDayViewForVideoIconAppearance = true;

        if (DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[day] < 3)
        {
            DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[day]++;
        }

        PutExerciseIdInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutExerciseTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutWorkoutTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutVideoUrlInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
    } 
}
