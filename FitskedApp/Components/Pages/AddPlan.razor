@page "/add-plan"
@using FitskedApp.DTO
@using FitskedApp.Data
@using FitskedApp.Helpers
@using FitskedApp.Models
@using FitskedApp.Utilities
@using FitskedApp.Data.Repository
@using FitskedApp.Data.Service
@rendermode InteractiveServer
@inject IUserPlanRepository planRepository
@inject IUserExerciseRepository userExerciseRepository
@inject IUserWorkoutRepository userWorkoutRepository
@inject IExerciseService exerciseService
@inject IFilteredExercisesManager exercisesFilterManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext ApplicationDbContext
@inject NavigationManager NavManager
@inject IUserService identityUserService
@inject NavigationLinks navLinksManager
@inject IJSRuntime jsRuntime

<PageTitle> Add Plan </PageTitle>

    <div class="@((IsDayViewWorkoutDisplayed ? "blurred" : ""))">
    <div class="plan-name-container d-flex justify-content-center align-items-center">
        <form>
            <div class="col-12 mb-3">
                <label class="text-black mt-2 pt-2 d-flex justify-content-center poppins-medium" for="PlanName">Plan Name</label>
                <input class="form-control mt-1 w-100 rounded-pill inner-input-shadow border-3 border border-warning"
                       type="text" id="PlanName" @bind="plan.Name" />
            </div>
        </form>
    </div>

    @if (IsBlankPlanErrorDisplayed)
    {
        <div class="d-flex justify-content-center">
            <p class="alert-danger"> Give your plan some identity—add a name! </p>
        </div>
    }

    <div class="row border-4 rounded-div border border-warning p-3 bg-white w-auto mb-2  inner-input-shadow">
            @foreach (var day in daysOfWeek)
            {
                <div class="col text-center mt-2 mb-2 m-lg-2 day-card rounded-div mr-1 rounded-div border border-3 border-danger ps-2 pe-2" @onclick="() => { if (!IsDayViewWorkoutDisplayed) UserSelectsDay(day);}">
                    <h5 class="mt-2 poppins-medium"> @day </h5>
                <hr />
                    <div class="pt-1">
                        <p class="poppins-bold">  @GetWorkoutTypeByDay(day) </p>  
                    <div  class="rounded-div">
                    <table class="table table-striped table-bordered table-sm table-extra-small-font">
                        <thead>
                            <tr>
                                <th scope="col">Exercise</th>
                                <th scope="col">Sets</th>
                                <th scope="col">Reps</th>
                                <th scope="col">Weight</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(UserExercise userExercise in ListOfUserExercisePerDay[@day])
                            {
                                <tr>
                                    <td> @userExercise.Name </td>
                                    <td> @userExercise.Sets </td>
                                    <td> @userExercise.Repetitions </td>
                                    <td> @userExercise.Weight </td>
                                </tr>
                            }               
                        </tbody>
                    </table>
                    </div>
                        <p class="poppins-medium exercise-summary-font"> @GetWorkoutSummary(day)</p>
                    </div>
                </div>
            }
        </div>

    <div class="d-flex justify-content-center mt-3">
        <button class="rounded-pill w-25 mb-2 poppins-medium border border-3 border-danger bg-white p-2 main-button" @onclick="navLinksManager.GoToViewPlansPage"> My Plans </button>
    </div>

    <div class="d-flex justify-content-center mt-3">
        <button class="rounded-pill w-25 mb-2 poppins-medium border border-3 border-danger bg-white p-2 main-button" @onclick="() => { if (!IsDayViewWorkoutDisplayed) AddNewPlan();}"> Save This Plan </button>
    </div>

    @* The below div should only come up when a user tries to save an incomplete plan. It should just be readily visible at the start. *@
    @* <div class="d-flex justify-content-center pt-4">
        <p class="poppins-medium">
            <span class="poppins-bold" style="color:green">TIP:</span> If you're time-crunched, save your plan and complete it later in
            <span class="poppins-bold"> My Plans </span>.
            <br />
            Before clicking "Save Plan," be sure to create a filler exercise for each day by clicking each day and selecting "Save Workout."
        </p>
    </div> *@
    

    

    @if (AreUnselectedWorkoutDaysDisplayed)
    {
        
        @foreach(var day in ListStoringUnclickedDays)
        {
            <div class="d-flex justify-content-center mt-3">
                <p class="alert-warning"> Don’t skip @day—add a workout, even if it’s just a filler or rest day! </p>
            </div>
        }
    }
</div>

@if(IsDayViewWorkoutDisplayed)
{
    <div class="overlay">
        <div class="d-flex justify-content-center">
            <div class="bg-white rounded-div border border-4 border-danger shadow-sm mb-3 mt-4 day-view-modal" style="width:90%">
                <div class="d-flex justify-content-center">
                    <h5 class="mt-2 poppins-bold">@selectedDay</h5>
                </div>
                <hr class="border border-2 border-danger" />
                <div class="container d-flex justify-content-center">
                    <EditForm Model="userExercise.WorkoutType">
                        <DataAnnotationsValidator />

                        <div class="d-flex justify-content-center">
                            @if ((HasUserSelectedWorkoutType == false) && (UserClickCountPerDay[selectedDay] == 0))
                            {
                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height justify-content-center d-flex w-50 text-center blinking-border"
                                             id="workoutType"
                                             @bind-Value="userExercise.WorkoutType"
                                             @bind-Value:after="() => FilterExercisesByWorkoutTypeAsync(selectedDay, userExercise.WorkoutType)">

                                    @foreach (var type in Enum.GetValues(typeof(WorkoutType)).Cast<WorkoutType>().Take(3))
                                    {
                                        if (type == WorkoutType.FillerValue)
                                        {
                                            <option value="@type" disabled selected hidden>@StringValuesForWorkoutType[type]</option>
                                        }
                                        else
                                        {
                                            <option value="@type">@StringValuesForWorkoutType[type]</option>
                                        }
                                    }
                                </InputSelect>
                            }
                            else
                            {
                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height justify-content-center d-flex w-50 text-center"
                                             id="workoutType"
                                             @bind-Value="userExercise.WorkoutType"
                                             @bind-Value:after="() => FilterExercisesByWorkoutTypeAsync(selectedDay, userExercise.WorkoutType)">
                                    
                                    @foreach (var type in Enum.GetValues(typeof(WorkoutType)).Cast<WorkoutType>().Take(3))
                                    {
                                        if (type == WorkoutType.FillerValue)
                                        {
                                            <option value="@type" disabled selected hidden>@StringValuesForWorkoutType[type]</option>
                                        }
                                        else
                                        {
                                            <option value="@type">@StringValuesForWorkoutType[type]</option>
                                        }
                                    }
                                </InputSelect>
                            }
                            
                        </div>
                        <br />
                        @for (int i = 0; i < UserExerciseTotalCountPerDay[selectedDay]; i++)
                        {
                            var j = i;
                            if (j >= listOfUserExercisesInSelectedDay.Count)
                            {
                                listOfUserExercisesInSelectedDay.Add(new UserExercise());
                            }

                            <div class="d-flex justify-content-center mb-2 gap-2">
                                @if ((HasUserSelectedExerciseType == false) && (UserClickCountPerDay[selectedDay] == 1) && (j == 0))
                                {
                                    @if (listOfUserExercisesInSelectedDay[j]?.VideoUrl != null)
                                    {
                                        <a class="text-decoration-none col-1 d-flex justify-content-center align-items-center" @onclick="() => (navLinksManager.GoToNavigationLink(listOfUserExercisesInSelectedDay[j].VideoUrl))">
                        <i class="fa-solid fa-video fa-xl" ></i>
                        </a>

                                        @* <a href="@listOfUserExercisesInSelectedDay[j].VideoUrl"
                                           target="_blank"
                                           rel="noopener noreferrer"
                                           class="text-decoration-none col-1 d-flex justify-content-center align-items-center">
                                            <i class="fa-solid fa-video fa-lg"></i>
                                        </a> *@

                                        @* <a class="text-decoration-none col-1 d-flex justify-content-center align-items-center"
                        @onclick="() => NavManager.NavigateTo(listOfUserExercisesInSelectedDay[j].VideoUrl, true)">
                        <i class="fa-solid fa-video fa-lg"></i>
                        </a> *@
                                    }
                                    else
                                    {
                                        
                                    }


                                    <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-3 text-center blinking-border"
                                                 id="exerciseType"
                                                 @bind-Value="listOfUserExercisesInSelectedDay[j].ExerciseType"
                                                 @bind-Value:after="() => ChangeExercisePoolBasedOnExerciseType(j,selectedDay)">

                                        @foreach (var type in Enum.GetValues(typeof(ExerciseType)).Cast<ExerciseType>().Take(4))
                                        {
                                            if (type == ExerciseType.FillerValue)
                                            {
                                                <option value="@type" disabled selected hidden>@StringValuesForExerciseType[type]</option>
                                            }
                                            else
                                            {
                                                <option value="@type">@StringValuesForExerciseType[type]</option>
                                            }
                                        }
                                    </InputSelect>  
                                }
                                else
                                {
                                    @if (ShouldDisplayVideoIcon == true)
                                    {
                                        <a class="text-decoration-none col-1 d-flex justify-content-center align-items-center" @onclick="() => (navLinksManager.GoToNavigationLink(listOfUserExercisesInSelectedDay[j].VideoUrl))">
                                            <i class="fa-solid fa-video fa-xl" ></i>
                                        </a>

                                        @* <a href="@listOfUserExercisesInSelectedDay[j].VideoUrl"
                                           target="_blank"
                                           rel="noopener noreferrer"
                                           class="text-decoration-none col-1 d-flex justify-content-center align-items-center">
                                            <i class="fa-solid fa-video fa-lg"></i>
                                        </a> *@

                                        @* <a class="text-decoration-none col-1 d-flex justify-content-center align-items-center"
                                           @onclick="() => NavManager.NavigateTo(listOfUserExercisesInSelectedDay[j].VideoUrl, true)">
                                            <i class="fa-solid fa-video fa-lg"></i>
                                        </a> *@
                                    }
                                    
                                    <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-3 text-center d-flex align-items-center"
                                                 id="exerciseType"
                                                 @bind-Value="listOfUserExercisesInSelectedDay[j].ExerciseType"
                                                 @bind-Value:after="() => ChangeExercisePoolBasedOnExerciseType(j,selectedDay)">

                                        @foreach (var type in Enum.GetValues(typeof(ExerciseType)).Cast<ExerciseType>().Take(4))
                                        {
                                            if (type == ExerciseType.FillerValue)
                                            {
                                                <option value="@type" disabled selected hidden>@StringValuesForExerciseType[type]</option>
                                            }
                                            else
                                            {
                                                <option value="@type">@StringValuesForExerciseType[type]</option>
                                            }
                                        }
                                    </InputSelect>
                                }


                                @if ((HasUserSelectedExercise == false) && (UserClickCountPerDay[selectedDay] == 2) && (j == 0))
                                {
                                    <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-4 text-center blinking-border d-flex align-items-center" id="exerciseName" @bind-Value="listOfUserExercisesInSelectedDay[j].Name" @bind-Value:after="() => BindValuesFromDtoToUserExercise(listOfUserExercisesInSelectedDay[j],listOfUserExercisesInSelectedDay[j].Name,listOfExercisesByWorkoutType,selectedDay,j)">
                                        <option value="" disabled selected> -- Exercise -- </option>
                                        @foreach (var exercise in listOfUserExercisesInSelectedDay[j].FilteredExercises)
                                        {
                                                <option value="@exercise.Name">@exercise.Name</option>
                                        }
                                    </InputSelect>
                                }
                                else
                                {
                                    <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-4 text-center d-flex align-items-center" id="exerciseName" @bind-Value="listOfUserExercisesInSelectedDay[j].Name" @bind-Value:after="() => BindValuesFromDtoToUserExercise(listOfUserExercisesInSelectedDay[j],listOfUserExercisesInSelectedDay[j].Name,listOfExercisesByWorkoutType,selectedDay,j)">
                                        <option value="" disabled selected> -- Exercise -- </option>
                                        @foreach (var exercise in listOfUserExercisesInSelectedDay[j].FilteredExercises)
                                        {
                                                <option value="@exercise.Name">@exercise.Name</option>

                                        }
                                    </InputSelect>
                                }


                                <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-1 text-center d-flex align-items-center" id="sets" @bind-Value="listOfUserExercisesInSelectedDay[j].Sets">
                                        <option value="" disabled selected> -- Sets -- </option>
                                        @foreach (var setNumber in ListOfSets)
                                        {
                                            <option value="@setNumber">@setNumber</option>
                                        }
                                    </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-1 text-center d-flex align-items-center" id="reps" @bind-Value="listOfUserExercisesInSelectedDay[j].Repetitions">
                                        <option value="" disabled selected> -- Reps -- </option>
                                        @foreach (var repNumber in ListOfReps)
                                        {
                                            <option value="@repNumber">@repNumber</option>
                                        }
                                    </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow user-exercise-select-height col-2 text-center d-flex align-items-center" id="weight" @bind-Value="listOfUserExercisesInSelectedDay[j].Weight">
                                        <option value="" disabled selected> -- Weight -- </option>
                                        @foreach (var weightNumber in ListOfWeight)
                                        {
                                            <option value="@weightNumber">@weightNumber lbs.</option>
                                        }
                                    </InputSelect>

                                @if ((j > 0) && (j == UserExerciseTotalCountPerDay[selectedDay] - 1))
                                {
                                    <button class="end-0 user-exercise-select-height col-1 bg-white border border-0 trash-button"
                                            @onclick="() => ThingsToDoOnClickRemove(selectedDay, j, listOfUserExercisesInSelectedDay[j].Name, listOfUserExercisesInSelectedDay[j])">
                                        <i class="fa-solid fa-trash-can fa-xl"></i>
                                    </button>

                                }
                                else
                                {
                                    <button class="end-0 user-exercise-select-height col-1 bg-white border border-0"
                                            style="visibility: hidden; color:darkred">
                                        <i class="fa-solid fa-trash-can fa-xl"></i>
                                    </button>
                                }


                            </div>
                        }
                        <div>
                            <button class="mt-3 rounded-pill mb-4 border border-2 border-danger poppins-medium bg-white main-button p-2" @onclick="() =>  AddAdditionalExerciseToWorkout(selectedDay)">
                                Add Exercise
                            </button>
                        </div>

                        <div class="d-flex justify-content-center">
                            <button class="mt-3 rounded-pill mb-4 border border-2 border-danger poppins-medium bg-white main-button p-2" @onclick="SaveUserWorkoutToInMemoryListOfUserWorkouts">Add Workout</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Plan plan = new();
    private UserExercise userExercise = new();
    public WorkoutType workoutType = new();

    private bool IsDayViewWorkoutDisplayed = false;
    private bool AreUnselectedWorkoutDaysDisplayed = false;
    private bool IsBlankPlanErrorDisplayed = false;
    private bool HasUserEnteredPlanName = false;
    private bool HasUserSelectedWorkoutType = false;
    private bool HasUserSelectedExerciseType = true;
    private bool HasUserSelectedExercise = true;
    private bool ShouldDisplayVideoIcon = false;
    private bool HasUserMadeInitalWorkoutTypeSelection = false;
    private string selectedDay = string.Empty;
    private string[] daysOfWeek = new string[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
    private List<int> ListOfSets = ListOfNumberHelper.GenerateListOfNumbers(1, 10, 1);
    private List<int> ListOfReps = ListOfNumberHelper.GenerateListOfNumbers(2, 20, 2);
    private List<int> ListOfWeight = ListOfNumberHelper.GenerateListOfNumbers(0, 405, 5);
    private List<string> ListStoringUnclickedDays = new List<string> { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
    private List<UserExercise> listOfUserExercisesInSelectedDay = new();
    private List<UserWorkout> workoutListForCurrentPlan = new();
    private List<ExerciseDTO> fullListOfExerciseDTO = new();
    private List<ExerciseDTO> listStoringSelectedExercises = new();
    public List<ExerciseDTO> listOfExercisesByWorkoutType = new();


    public Dictionary<string, List<UserExercise>> ListOfUserExercisePerDay = new();
    public Dictionary<string, Dictionary<int, string>> previousExerciseSelectionsPerDay = new()
{
    { "Sunday", new Dictionary<int, string>() },
    { "Monday", new Dictionary<int, string>() },
    { "Tuesday", new Dictionary<int, string>() },
    { "Wednesday", new Dictionary<int, string>() },
    { "Thursday", new Dictionary<int, string>() },
    { "Friday", new Dictionary<int, string>() },
    { "Saturday", new Dictionary<int, string>() }
};
    public Dictionary<WorkoutType, Dictionary<ExerciseType, List<ExerciseDTO>>> DictionaryStoringFilteredExercises = new()
    {
        // TODO: Fix this. Entirety of logic will most likely need to be redone.
        { WorkoutType.UpperBodyStrength, new Dictionary<ExerciseType, List<ExerciseDTO>>
            {
                { ExerciseType.Primary, new List<ExerciseDTO>() },
                { ExerciseType.Secondary, new List<ExerciseDTO>() },
                { ExerciseType.Accessory, new List<ExerciseDTO>() },
                { ExerciseType.FillerValue, new List<ExerciseDTO>()}
            }
        },
        { WorkoutType.LowerBodyStrength, new Dictionary<ExerciseType, List<ExerciseDTO>>
            {
                { ExerciseType.Primary, new List<ExerciseDTO>() },
                { ExerciseType.Secondary, new List<ExerciseDTO>() },
                { ExerciseType.Accessory, new List<ExerciseDTO>() },
                { ExerciseType.FillerValue, new List<ExerciseDTO>()}
            }
        },
        { WorkoutType.FillerValue, new Dictionary<ExerciseType, List<ExerciseDTO>>
            {
                { ExerciseType.Primary, new List<ExerciseDTO>() },
                { ExerciseType.Secondary, new List<ExerciseDTO>() },
                { ExerciseType.Accessory, new List<ExerciseDTO>() },
                { ExerciseType.FillerValue, new List<ExerciseDTO>()}
            }
        }
    };    
    private static readonly Dictionary<WorkoutType, string> StringValuesForWorkoutType = new()
    {
            {WorkoutType.FillerValue, " -- Workout Type -- "},
            {WorkoutType.UpperBodyStrength, "Upper Body" },
            {WorkoutType.LowerBodyStrength, "Lower Body" }
    };
    private static readonly Dictionary<ExerciseType, string> StringValuesForExerciseType = new()
    {
        {ExerciseType.FillerValue, " -- Exercise Type -- "},
        {ExerciseType.Primary, "Primary"},
        {ExerciseType.Secondary, "Secondary"},
        {ExerciseType.Accessory, "Accessory"}
    };
    private Dictionary<string, int> ListPositionForDay = new Dictionary<string, int>
    {
        { "Sunday", 0 },
        { "Monday", 1 },
        { "Tuesday", 2 },
        { "Wednesday", 3 },
        { "Thursday", 4 },
        { "Friday", 5 },
        { "Saturday", 6 }
    };
    public Dictionary<string, int> UserExerciseTotalCountPerDay = new Dictionary<string, int>
    {
        { "Sunday", 1},
        { "Monday", 1 },
        { "Tuesday", 1},
        { "Wednesday", 1},
        { "Thursday", 1 },
        { "Friday", 1},
        { "Saturday", 1}
    }; // Really don't even need this. We can just get the count of UserExercise in ListOfUserExercisePerDay
    public Dictionary<string, int> UserClickCountPerDay = new Dictionary<string, int>
    {
        { "Sunday", 0},
        { "Monday", 0},
        { "Tuesday", 0},
        { "Wednesday", 0},
        { "Thursday", 0},
        { "Friday", 0},
        { "Saturday", 0}
    }; // Doesn't Apply To ViewEditPlan
    public Dictionary<string, bool> IntialWorkoutTypeSelectionState = new Dictionary<string, bool>
{
    { "Sunday", false },
    { "Monday", false },
    { "Tuesday", false },
    { "Wednesday", false },
    { "Thursday", false },
    { "Friday", false },
    { "Saturday", false }
};
    Dictionary<string, WorkoutType> workoutTypePerDay = new Dictionary<string, WorkoutType>
        {
            { "Sunday", WorkoutType.FillerValue },
            { "Monday", WorkoutType.FillerValue },
            { "Tuesday", WorkoutType.FillerValue },
            { "Wednesday", WorkoutType.FillerValue },
            { "Thursday", WorkoutType.FillerValue },
            { "Friday", WorkoutType.FillerValue },
            { "Saturday", WorkoutType.FillerValue }
        };




    protected override async Task OnInitializedAsync()
    {
        foreach (var day in daysOfWeek)
        {
            if (!ListOfUserExercisePerDay.ContainsKey(day))
            {
                ListOfUserExercisePerDay[day] = new List<UserExercise>();
            }
        }

        for(int i = 0; i < 7; i++)
        {
            var j = i;
            UserWorkout newWorkout = new UserWorkout();
            exercisesFilterManager.AddItemToList(newWorkout, workoutListForCurrentPlan);
        }
        fullListOfExerciseDTO = await exerciseService.GetFullExerciseListAsync();
    }

    private void UserSelectsDay(string day)
    {
        // IMPORTANT: MAYBE, UPON PAGE LOAD, WE NEED TO UPDATE THE LIST OF WORKOUT TYPE BASED ON THE WORKOUT TYPE OF THE FIRST USEREXERCISE. AND THIS WOULD ONLY BE LIKE IF THERE WERE GREATER THAN 1 USER EXERCISE IN THE WORKOUT
        // Or maybe just automatically the listofexercises by user will be updated and reflected based on the current workout type of the day
        selectedDay = day;
        if (ListOfUserExercisePerDay[day].FirstOrDefault() == null)
        {
            userExercise.WorkoutType = WorkoutType.FillerValue;
        }
        else
        {
            userExercise.WorkoutType = ListOfUserExercisePerDay[day].FirstOrDefault().WorkoutType;
        }
        listOfUserExercisesInSelectedDay = ListOfUserExercisePerDay[day];
        UpdateSelectableExerciseListForEachUserExercise(DictionaryStoringFilteredExercises, listOfUserExercisesInSelectedDay,day);
        IsDayViewWorkoutDisplayed = true;
        ListStoringUnclickedDays.RemoveAll(e => e.Equals(selectedDay));
        StateHasChanged();
    }

    private void SaveUserWorkoutToInMemoryListOfUserWorkouts()
    {
        if (ListPositionForDay.ContainsKey(selectedDay))
        {
            ListOfUserExercisePerDay[selectedDay] = listOfUserExercisesInSelectedDay;

            int dayIndex = ListPositionForDay[selectedDay];


            workoutListForCurrentPlan.RemoveAt(dayIndex);

            UserWorkout userWorkout = new UserWorkout
                {
                    PlanId = plan.Id,
                    UserExercises = listOfUserExercisesInSelectedDay
                };

            workoutListForCurrentPlan.Insert(dayIndex, userWorkout);
            IsDayViewWorkoutDisplayed = false;
            HasUserSelectedWorkoutType = false;
            HasUserSelectedExerciseType = true;
            HasUserSelectedExercise = true;
            StateHasChanged();
        }
    }

    public void FilterExercisesByWorkoutTypeAsync(string day, WorkoutType workoutType)
    {
        HasUserSelectedWorkoutType = true;
        HasUserSelectedExerciseType = false;

        if (UserClickCountPerDay[day] < 3)
        {
            UserClickCountPerDay[day]++;
        }

        workoutTypePerDay[day] = workoutType;
        listOfExercisesByWorkoutType = exerciseService.GetExerciseListBasedOnWorkoutType(userExercise.WorkoutType, fullListOfExerciseDTO);


        foreach (var exercise in listOfUserExercisesInSelectedDay)
        {
            exercise.FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, exercise.ExerciseType);
        }

        if (IntialWorkoutTypeSelectionState[day])
        {
            foreach (UserExercise exercise in ListOfUserExercisePerDay[day])
            {
                List<string> itemsToRemove = new List<string>();

                foreach (ExerciseDTO exerciseDTO in exercise.FilteredExercises)
                {
                    if (exerciseDTO.WorkoutType != workoutType)
                    {
                        itemsToRemove.Add(exerciseDTO.Name);
                    }
                }
                exercise.FilteredExercises.RemoveAll(e => itemsToRemove.Contains(e.Name));
            } 
        }

        IntialWorkoutTypeSelectionState[day] = true;
        StateHasChanged();
    }

    public void PutSelectedExerciseInFilteredBin(Dictionary<string, List<UserExercise>> listOfUserExercisePerDay, string selectedDay, int j) // Just adding to filtered list so we know which exercises have been selected in the pool of workouts
    {
        UserExercise selectedExercise = new();
        selectedExercise = listOfUserExercisePerDay[selectedDay][j];


        ExerciseDTO dto = new ExerciseDTO
                {
                Name = selectedExercise.Name,
                VideoUrl = selectedExercise.VideoUrl,
                ExerciseType = selectedExercise.ExerciseType,
                WorkoutType = selectedExercise.WorkoutType
                };

        DictionaryStoringFilteredExercises[dto.WorkoutType][dto.ExerciseType].Add(dto);
    }

    public void UpdateSelectableExerciseListForEachUserExercise(
    Dictionary<WorkoutType, Dictionary<ExerciseType, List<ExerciseDTO>>> dictionaryWithSelectedExercises,
    List<UserExercise> listOfUserExercisesForDay, string day)
    {
        // This is the overloaded method for when the user clicks into a new day.
        if (listOfUserExercisesForDay.Count == 0) return;

        foreach (UserExercise userExercise in listOfUserExercisesForDay)
        {
            if(userExercise.WorkoutType == workoutTypePerDay[day])
            {
                UpdateFilteredExercisesForUserExercise(dictionaryWithSelectedExercises, userExercise);
            }

        }

        StateHasChanged();
    }

    public void UpdateSelectableExerciseListForEachUserExercise(Dictionary<WorkoutType, Dictionary<ExerciseType, List<ExerciseDTO>>> dictionaryWithSelectedExercises,List<UserExercise> listOfUserExercisesForDay,UserExercise clickedUserExercise)
    {
        // This is the overloaded method for when the user selects a new exercise that already exists and for the thingstodoonclickremove - that rhymes. 
        if (listOfUserExercisesForDay.Count == 0) return;

        foreach (UserExercise userExercise in listOfUserExercisesForDay)
        {
            if ((userExercise.Name != clickedUserExercise.Name) && (userExercise.ExerciseType == clickedUserExercise.ExerciseType)) // Clickeduserexercise and userExercise will be the same here after selecting an exercise type over and actual exercise. We also have the same method above. We are using two overloaded methods. All of this has to be refactored.
            {
                UpdateFilteredExercisesForUserExercise(dictionaryWithSelectedExercises, userExercise);
            }
        }

        StateHasChanged();
    }

    public void UpdateSelectableExerciseListForEachUserExercise(Dictionary<WorkoutType, Dictionary<ExerciseType, List<ExerciseDTO>>> dictionaryWithSelectedExercises, List<UserExercise> listOfUserExercisesForDay, int j)
    {
        // This is the overloaded method for when the user selects a different exercise type 
        if (listOfUserExercisesForDay.Count == 0) return;

        for (int i = 0; i < listOfUserExercisesForDay.Count; i++)
        {
            int k = i;
            UserExercise userExercise = listOfUserExercisesForDay[k];
            if (k != j)
            {
                UpdateFilteredExercisesForUserExercise(dictionaryWithSelectedExercises, userExercise);
            }

            StateHasChanged();
        }
    }
    private void UpdateFilteredExercisesForUserExercise(Dictionary<WorkoutType, Dictionary<ExerciseType, List<ExerciseDTO>>> dictionaryWithSelectedExercises, UserExercise userExercise)
    {
        WorkoutType workoutType = userExercise.WorkoutType;
        ExerciseType exerciseType = userExercise.ExerciseType;
        string selectedExerciseName = userExercise.Name;

        // Remove exercises that match criteria for removal
        var exercisesToRemove = userExercise.FilteredExercises
            .Where(exercise => exercise.Name != selectedExerciseName &&
                dictionaryWithSelectedExercises[workoutType][exerciseType].Any(selectedExercise => selectedExercise.Name == exercise.Name)).ToList();

        // Determine exercises to add to filtered list
        var exercisesToAdd = ExercisesToAddToFilteredUserExerciseLists(userExercise);

        // Perform removal and addition operations
        exercisesFilterManager.RemoveItemsFromList(exercisesToRemove, userExercise.FilteredExercises);
        exercisesFilterManager.AddItemsToList(exercisesToAdd, userExercise.FilteredExercises);

        // Move the current selected exercise to the top of the filtered list
        var selectedExercise = userExercise.FilteredExercises.FirstOrDefault(e => e.Name == selectedExerciseName);
        if (selectedExercise != null)
        {
            userExercise.FilteredExercises.Remove(selectedExercise);
            userExercise.FilteredExercises.Insert(0, selectedExercise);
        }
    }

    private List<ExerciseDTO> ExercisesToAddToFilteredUserExerciseLists(UserExercise userExercise)
    {
        return fullListOfExerciseDTO
            .Where(dto => dto.WorkoutType == userExercise.WorkoutType &&
                          dto.ExerciseType == userExercise.ExerciseType &&
                          !userExercise.FilteredExercises.Any(filtered => filtered.Name == dto.Name))
            .ToList();
    }
    public void UpdateListOfPreviouslySelectedExercisesForSelectedDay(int j, string selectedDay, string name, WorkoutType workoutType, ExerciseType exerciseType)
    {
        if (previousExerciseSelectionsPerDay[selectedDay][j] != name) // This basically just checks that the exercise change was an actual change and not just the selection of the same value
        {
            ExerciseDTO previouslySelectedexerciseDTO = listStoringSelectedExercises.Find(e => e.Name == previousExerciseSelectionsPerDay[selectedDay][j]);
            if(previouslySelectedexerciseDTO != null) // Now that were null checking here, we aren't able to plug squats in, but atleast we've got the null checking figured out - partially.
            {
                fullListOfExerciseDTO.Add(previouslySelectedexerciseDTO);
                listStoringSelectedExercises.Remove(previouslySelectedexerciseDTO);
                DictionaryStoringFilteredExercises[workoutType][exerciseType].RemoveAll(e => e.Name == previouslySelectedexerciseDTO.Name); // So were removing all (really just one) of the exercise that was changed because if its changed then the user can still select it
                previousExerciseSelectionsPerDay[selectedDay][j] = name;
            }

        }
    }
    public void RemoveSelectedExerciseFromAvailableList(string exerciseName, string day, int j)
    {
        ExerciseDTO dto = fullListOfExerciseDTO.Find(e => e.Name == exerciseName);
        exercisesFilterManager.AddItemToList(dto, listStoringSelectedExercises);
        fullListOfExerciseDTO.RemoveAll(e => e.Name == exerciseName);

        if (!previousExerciseSelectionsPerDay[day].ContainsKey(j))
        {
            previousExerciseSelectionsPerDay[day].Add(j, exerciseName);
        }
        StateHasChanged();
    }
    private void RemoveExerciseFromExerciseListFilteredByWorkoutType(string name, List<ExerciseDTO> filteredExerciseList, int j, string day)
    {
        filteredExerciseList.RemoveAll(e => e.Name == name);

        if (previousExerciseSelectionsPerDay[selectedDay][j] != name) // This is how we know it actually changed. The names shouldn't be the same
        {
            ExerciseDTO exerciseDTO = listStoringSelectedExercises.Find(e => e.Name == previousExerciseSelectionsPerDay[selectedDay][j]);
            if(exerciseDTO != null)
            {
                exercisesFilterManager.AddItemToList(exerciseDTO, filteredExerciseList);
            }

        }
        StateHasChanged();
    }

    public ExerciseDTO GetExerciseDTOFromListStoringSelectedExercises(string name)
    {
        ExerciseDTO previouslySelectedxerciseDTO = listStoringSelectedExercises.Find(e => e.Name == name);
        return previouslySelectedxerciseDTO;
    }


    private void ThingsToDoOnClickRemove(string day, int i, string exerciseName, UserExercise exercise)
    {
        if (!string.IsNullOrEmpty(exerciseName))
        {
            ExerciseDTO exerciseDTO = GetExerciseDTOFromListStoringSelectedExercises(exerciseName);

            exercisesFilterManager.AddItemToList(exerciseDTO, fullListOfExerciseDTO);

            if (previousExerciseSelectionsPerDay.ContainsKey(day)
                && previousExerciseSelectionsPerDay[day].ContainsKey(i))
            {
                previousExerciseSelectionsPerDay[day].Remove(i);
            }

            exercisesFilterManager.RemoveItemFromList(exerciseDTO, listStoringSelectedExercises);
            listOfExercisesByWorkoutType.Add(exerciseDTO); // I believe we are already doing this somethingwhere. This should do the trick for now but we really not the find where the exercise is getting readded and use that.
            DictionaryStoringFilteredExercises[exercise.WorkoutType][exercise.ExerciseType].RemoveAll(e => e.Name == exerciseName); // Might need to add some exception handling around here.
            UpdateSelectableExerciseListForEachUserExercise(DictionaryStoringFilteredExercises, ListOfUserExercisePerDay[day], exercise);
        }

        RemoveAdditionalExerciseFromWorkout(day);
        StateHasChanged();
    }
    public string GetWorkoutTypeByDay(string day)
    {
        if (ListOfUserExercisePerDay.TryGetValue(day, out var userWorkout) && userWorkout?.Any() == true)
        {
            var userExercise = userWorkout.FirstOrDefault();
            if (userExercise != null)
            {
                var enumValue = userExercise.WorkoutType;
                switch (enumValue)
                {
                    case WorkoutType.UpperBodyStrength:
                        return "Upper Body";

                    case WorkoutType.LowerBodyStrength:
                        return "Lower Body";

                    default:
                        return "Nothing going on today";
                }
            }
        }
        return "Workout Type Unselected";
    }
    private string GetWorkoutSummary(string day)
    {
        if (ListOfUserExercisePerDay.TryGetValue(day, out var exercises) && exercises.Any())
        {
            return "";
        }
        return "No Exercises Added.";
    }
    private async Task AddNewPlan()
    {
        CheckIfPlanNameHasValue(plan);
        if(HasUserEnteredPlanName)
        {
            if(ListStoringUnclickedDays.Count == 0)
            {
                IsBlankPlanErrorDisplayed = false;
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity?.IsAuthenticated == true)
                {
                    var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                    if (!string.IsNullOrEmpty(userId))
                    {
                        plan.ApplicationUserId = userId;
                    }

                    var transaction = await ApplicationDbContext.Database.BeginTransactionAsync();
                    try
                    {
                        int planId = await planRepository.AddPlan(plan);

                        await userWorkoutRepository.PersistListOfUserWorkoutsToDatabaseAsync(workoutListForCurrentPlan, planId);

                        await transaction.CommitAsync();
                        plan = new Plan();
                        navLinksManager.GoToViewPlansPage();
                    }
                    catch (Exception e)
                    {
                        await transaction.RollbackAsync();
                        throw new Exception($"Something went wrong with the database transaction: {e.Message}");
                    }
                }
            }
            else
            {
                IsBlankPlanErrorDisplayed = false;
                AreUnselectedWorkoutDaysDisplayed = true;
            }
        }
        else
        {
            IsBlankPlanErrorDisplayed = true;
            CheckIfUserHasCreatedWorkoutForEveryDay(ListStoringUnclickedDays);
        }
    }
    public void CheckIfPlanNameHasValue(Plan plan)
    {
        if(plan.Name != null)
        {
            HasUserEnteredPlanName = true;
        }
    }
    public void CheckIfUserHasCreatedWorkoutForEveryDay(List<string> selectedDays)
    {
        if(selectedDays.Count != 0)
        {
            AreUnselectedWorkoutDaysDisplayed = true;
        }
    }
    private void AddAdditionalExerciseToWorkout(string day)
    {
        if (UserExerciseTotalCountPerDay[day] < 15)
        {
            UserExerciseTotalCountPerDay[day] += 1;
            StateHasChanged();
        }
    }
    public void PutExerciseIdInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
        if(filteredExercise != null)
        {
            userExercise.ExerciseId = filteredExercise.ExerciseId;
        }

    }
    public void PutWorkoutTypeInUserExerciseBasedOnName(UserExercise userExercise,string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();

        if (filteredExercise != null)
        {
            userExercise.WorkoutType = filteredExercise.WorkoutType;
        }

    }
    public void PutExerciseTypeInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault(); // Really this should be put into its own method
        if (filteredExercise != null)
        {
            userExercise.ExerciseType = filteredExercise.ExerciseType;
        }

    }
    public void PutVideoUrlInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault(); // Really this should be put into its own method
        if (filteredExercise != null)
        {
            userExercise.VideoUrl = filteredExercise.VideoUrl;
        }

    }



    private void RemoveAdditionalExerciseFromWorkout(string day)
    {
        UserExerciseTotalCountPerDay[day] -= 1;
        listOfUserExercisesInSelectedDay.RemoveAt(listOfUserExercisesInSelectedDay.Count - 1);
        StateHasChanged();
    }
    public void BindValuesFromDtoToUserExercise(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn,string day, int j)
    {
        HasUserSelectedExercise = true;
        ShouldDisplayVideoIcon = true;

        if (UserClickCountPerDay[day] < 3)
        {
            UserClickCountPerDay[day]++;
        }

        PutExerciseIdInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutExerciseTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutWorkoutTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutVideoUrlInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        RemoveSelectedExerciseFromAvailableList(name,day,j);
        RemoveExerciseFromExerciseListFilteredByWorkoutType(name, listOfExercisesToFilterOn, j, day);
        UpdateListOfPreviouslySelectedExercisesForSelectedDay(j, day, name, userExercise.WorkoutType, userExercise.ExerciseType); 
        PutSelectedExerciseInFilteredBin(ListOfUserExercisePerDay, day,j);
        UpdateSelectableExerciseListForEachUserExercise(DictionaryStoringFilteredExercises, listOfUserExercisesInSelectedDay, userExercise);
        StateHasChanged();
    } 
    public async Task ChangeExercisePoolBasedOnExerciseType(int index, string day)
    {
        HasUserSelectedExerciseType = true;
        HasUserSelectedExercise = false;
        if (UserClickCountPerDay[day] < 3)
        {
            UserClickCountPerDay[day]++;
        }

        var selectedExerciseType = listOfUserExercisesInSelectedDay[index].ExerciseType;
        listOfExercisesByWorkoutType = await exerciseService.GetFullExerciseListAsync(); // This is probably not the solution but its working towards it. It might be as the below logic is checking for duplicates but its probably best to get a list based on the exercises that haven't been selected.
        listOfExercisesByWorkoutType = listOfExercisesByWorkoutType.Where(e => e.WorkoutType == workoutTypePerDay[day]).ToList();

        listOfExercisesByWorkoutType = listOfExercisesByWorkoutType
    .Where(exercise => !listStoringSelectedExercises.Any(exerciseDTO => exercise.Name == exerciseDTO.Name))
    .ToList();



        listOfUserExercisesInSelectedDay[index].FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, selectedExerciseType);

        UserExercise previousUserExercise = listOfUserExercisesInSelectedDay[index];
        string previousExerciseName = previousUserExercise.Name; // This means that "if an exercise was there originally, then..." 

        if (!string.IsNullOrEmpty(previousExerciseName))
        {
            ExerciseDTO exerciseDTO = GetExerciseDTOFromListStoringSelectedExercises(previousExerciseName);

            if(exerciseDTO != null)
            {
                ExerciseType previousExerciseExerciseType = exerciseDTO.ExerciseType; // We probably need to set some constriants on when and when not to use this. Acutally, I don't think we do becuase we only call this method upon selecting a new exercise type. Let's try this out.
                exercisesFilterManager.AddItemToList(exerciseDTO, fullListOfExerciseDTO);
                exercisesFilterManager.RemoveItemFromList(exerciseDTO, listStoringSelectedExercises);

                if(exerciseDTO.WorkoutType == workoutTypePerDay[day])
                {
                    listOfExercisesByWorkoutType.Add(exerciseDTO);
                }

                DictionaryStoringFilteredExercises[previousUserExercise.WorkoutType][previousExerciseExerciseType].RemoveAll(e => e.Name == previousExerciseName);
                UpdateSelectableExerciseListForEachUserExercise(DictionaryStoringFilteredExercises, ListOfUserExercisePerDay[day],day);
            }
        }
        await InvokeAsync(StateHasChanged);
    } 
}
