@page "/add-plan"
@using FitskedApp.DTO
@using FitskedApp.Data
@using FitskedApp.Models
@rendermode InteractiveServer
@inject IUserPlanRepository planRepository
@inject IUserExerciseRepository userExerciseRepository
@inject IUserWorkoutRepository userWorkoutRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext ApplicationDbContext
@inject NavigationManager NavManager

<h3 class="d-flex justify-content-center"> Create Plan </h3>

<form>
    <div class="d-flex justify-content-center">
        <label for="PlanName">Plan Name:</label>
        <input type="text" id="PlanName" @bind="plan.Name" />
    </div>
</form>

<div class="row border border-dark p-3">
    @foreach (var day in daysOfWeek)
    {
        <div class="col text-center" @onclick="() => { if (!displayDayViewWorkout) UserSelectsDay(day); }">
            <h5> @day </h5>
            <div class="workout-body border-top pt-3 row">
                <label> Exercise Details (for selected day): </label>
                <p> @GetWorkoutSummary(day)</p>
            </div>
        </div>
    }
</div>

<button @onclick="AddNewPlan"> Add Plan </button>

@if (displayDayViewWorkout)
{
    <div class="day-view-modal">
        <h5>@selectedDay</h5>

        <EditForm Model="userExercise">
            <DataAnnotationsValidator />

            <label for="workoutType"> Workout Type: </label>
            <InputSelect id="workoutType" @bind-Value="userExercise.WorkoutType" @bind-Value:after="GetExercisesByWorkoutType">
                @foreach (var type in Enum.GetValues(typeof(WorkoutType)))
                {
                    <option value="@type">@type</option>
                }
            </InputSelect>

            @for (int i = 0; i < numberOfExercisesInWorkout; i++)
            {
                var j = i;
                if (j >= listOfUserExercisesInSelectedDay.Count)
                {
                    listOfUserExercisesInSelectedDay.Add(new UserExercise());
                }

                <div>
                    <label for="exerciseType"> Exercise Type: </label>
                    <InputSelect id="exerciseType" @bind-Value="listOfUserExercisesInSelectedDay[j].ExerciseType" @bind-Value:after="() => GetExercisesByExerciseType(j)">
                        <option value="" disabled selected> -- Select Exercise Type -- </option>
                        @foreach (var type in Enum.GetValues(typeof(ExerciseType)))
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>

                    <label for="exerciseName"> Exercise: </label>
                    <InputSelect id="exerciseName" @bind-Value="listOfUserExercisesInSelectedDay[j].Name" @bind-Value:after="() => BindValuesFromDtoToUserExercise(listOfUserExercisesInSelectedDay[j],listOfUserExercisesInSelectedDay[j].Name,listOfExercisesByWorkoutType)">
                        <option value="" disabled selected> -- Select Exercise -- </option>
                        @foreach (var exercise in listOfUserExercisesInSelectedDay[j].FilteredExercises)
                        {
                            <option value="@exercise.Name">@exercise.Name</option>
                        }
                    </InputSelect>

                    <label for="sets"> Sets: </label>
                    <input type="number" id="sets" @bind="listOfUserExercisesInSelectedDay[j].Sets" />

                    <label for="reps"> Reps: </label>
                    <input type="number" id="reps" @bind="listOfUserExercisesInSelectedDay[j].Repetitions" />

                    <label for="weight"> Weight: </label>
                    <input type="number" id="weight" @bind="listOfUserExercisesInSelectedDay[j].Weight" />
                </div>
            }
        </EditForm>

        <button class="btn btn-primary mt-3" @onclick="SaveWorkout">Save Workout</button>
    </div>
}

@code {
    private string[] daysOfWeek = new string[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
    private Plan plan = new();
    private UserExercise userExercise = new();
    private int numberOfExercisesInWorkout = 2;
    private Dictionary<string, List<UserExercise>> DictionaryOfListOfUserExerciseForSelectedDay = new();
    private string selectedDay = string.Empty;
    private List<UserExercise> listOfUserExercisesInSelectedDay = new();
    private List<UserWorkout> workoutListForCurrentPlan = new();
    private bool displayDayViewWorkout = false;
    public List<ExerciseDTO> listOfExercisesByWorkoutType = new();

    protected override void OnInitialized()
    {
        foreach (var day in daysOfWeek)
        {
            if (!DictionaryOfListOfUserExerciseForSelectedDay.ContainsKey(day))
            {
                DictionaryOfListOfUserExerciseForSelectedDay[day] = new List<UserExercise>();
            }
        }
    }

    private void UserSelectsDay(string day)
    {
        selectedDay = day;
        listOfUserExercisesInSelectedDay = DictionaryOfListOfUserExerciseForSelectedDay[day];
        displayDayViewWorkout = true;
    }

    private void SaveWorkout()
    {
        DictionaryOfListOfUserExerciseForSelectedDay[selectedDay] = listOfUserExercisesInSelectedDay;

        UserWorkout userWorkout = new UserWorkout
            {
                PlanId = plan.Id, // Ensure to set this before saving
                UserExercises = listOfUserExercisesInSelectedDay
            };

        workoutListForCurrentPlan.Add(userWorkout);
        displayDayViewWorkout = false;
    }

    private string GetWorkoutSummary(string day)
    {
        if (DictionaryOfListOfUserExerciseForSelectedDay.TryGetValue(day, out var exercises) && exercises.Any())
        {
            return string.Join(", ", exercises.Select(e => $"{e.Name} ({e.Sets} x {e.Repetitions}) - {e.Weight}"));
        }
        return "You haven't added any workouts here yet. Are you taking an off day?";
    }

    private async Task AddNewPlan()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                plan.ApplicationUserId = userId;
            }

            var transaction = await ApplicationDbContext.Database.BeginTransactionAsync();
            try
            {
                int planId = await planRepository.AddPlan(plan);

                foreach (UserWorkout userworkout in workoutListForCurrentPlan)
                {
                    userworkout.PlanId = planId;
                    await userWorkoutRepository.AddWorkout(userworkout);
                }

                await transaction.CommitAsync();
                plan = new Plan();
                NavManager.NavigateTo($"/");
            }
            catch (Exception e)
            {
                await transaction.RollbackAsync();
                throw new Exception($"Something went wrong with the database transaction: {e.Message}");
            }
        }
    }

    public async Task GetExercisesByWorkoutType()
    {
        listOfExercisesByWorkoutType = await userExerciseRepository.GetExercisesBasedOnWorkoutType(userExercise.WorkoutType);
        foreach (var exercise in listOfUserExercisesInSelectedDay)
        {
            exercise.FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, exercise.ExerciseType);
        }
        StateHasChanged();
    }

    public async Task GetExercisesByExerciseType(int index)
    {
        var selectedExerciseType = listOfUserExercisesInSelectedDay[index].ExerciseType;
        listOfUserExercisesInSelectedDay[index].FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, selectedExerciseType);
        await InvokeAsync(StateHasChanged);
    }

    // So ultimately we need 4 methods. We need the method that runs all of the methods we need to get an exerciseId from Name, workoutType from Name, and exerciseType by Name.
    // I would rather do this and have the binded value show up in the week view for the name and then get the other values based on the name.
    // ChatGPT recommended something different but this is how I think it should work given what I want and best coding practices.
    // The main method is probably going to take in a reference parameter which will be changed which will the the particular instance of userExercise
    // The main method will also take in the userExercise Name to filter based on a listofFilteredExercise which we'll also probably have to include as a parameter 
    // We use the listofExercisesForSelectedDay variable to filter and retrive information as it is undoubtedly in scope.
    // Need to refactor all of this and put it somewhere else because this razor component is becoming ridiculous.
    public void PutExerciseIdInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
        userExercise.ExerciseId = filteredExercise.ExerciseId;
    }

    public void PutWorkoutTypeInUserExerciseBasedOnName(UserExercise userExercise,string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        // Question: Do we need to specify keywords out or ref here is we are ultimately editing the value currently in userExercise?
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
        userExercise.WorkoutType = filteredExercise.WorkoutType;
    }

    public void PutExerciseTypeInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault(); // Really this should be put into its own method
        userExercise.ExerciseType = filteredExercise.ExerciseType;
    }

    public void BindValuesFromDtoToUserExercise(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        PutExerciseIdInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutExerciseTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutWorkoutTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
    }

    
}
