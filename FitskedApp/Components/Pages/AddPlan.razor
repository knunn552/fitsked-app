@page "/add-plan"
@using FitskedApp.DTO
@using FitskedApp.Data
@using FitskedApp.Models
@rendermode InteractiveServer
@inject IUserPlanRepository planRepository
@inject IUserExerciseRepository userExerciseRepository
@inject IUserWorkoutRepository userWorkoutRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext ApplicationDbContext
@inject NavigationManager NavManager


    <div class="@((displayDayViewWorkout ? "blurred" : ""))">
        <div class="d-flex justify-content-center">
            <form>
                <div class="col-12 mb-3">
                    <label class="text-black mt-4 d-flex justify-content-center poppins-medium" for="PlanName">Plan Name</label>
                    <input class="form-control mt-1 w-100 rounded-pill inner-input-shadow" type="text" id="PlanName" @bind="plan.Name" />
                </div>
            </form>
        </div>

        <div class="row border-3 rounded-div border border-dark p-3 bg-white w-auto mt-1 mb-1">
            @foreach (var day in daysOfWeek)
            {
                <div class="col text-center mt-2 mb-2 m-lg-2 mr-2 day-card rounded-div" @onclick="() => { if (!displayDayViewWorkout) UserSelectsDay(day); }">
                    <h5 class="mt-2 poppins-medium"> @day </h5>
                    <div class="border-top pt-3 row">
                        <label class="poppins-bold"> @GetWorkoutTypeByDay(day) </label>
                        <br />
                        <p class="poppins-medium"> @GetWorkoutSummary(day)</p>
                        
                    </div>
                </div>
            }
        </div>

        <div class="d-flex justify-content-center mt-2 mt-4">
            <button class="btn-custom rounded-pill shadow w-50 mt-2 mb-2 poppins-medium" @onclick="AddNewPlan"> Add Plan </button>
        </div>
    </div>





@if(displayDayViewWorkout)
{
    <div class="overlay">
        <div class="d-flex justify-content-center">
            <div class="bg-white rounded-div w-50 border border-3 border-dark shadow-lg mb-3 mt-4 day-view-modal">
                <div class="d-flex justify-content-center">
                    <h5 class="mt-4 poppins-medium">@selectedDay</h5>
                </div>
                <div class="container d-flex justify-content-center">
                    <EditForm Model="userExercise">
                        <DataAnnotationsValidator />

                        @* <label for="workoutType"> Workout Type: </label> *@
                        <div class="d-flex justify-content-center">
                            <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height justify-content-center d-flex w-50" id="workoutType" @bind-Value="userExercise.WorkoutType" @bind-Value:after="GetExercisesByWorkoutType">
                                @foreach (var type in Enum.GetValues(typeof(WorkoutType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                        </div>

                        <br />

                        <div class="row-cols-md-auto">
                            <label for="exerciseType" class="poppins-medium"> Exercise Type: </label>
                            <label for="exerciseName" class="poppins-medium"> Exercise: </label>
                            <label for="sets" class="poppins-medium"> Sets: </label>
                            <label for="reps" class="poppins-medium"> Reps: </label>
                            <label for="weight" class="poppins-medium"> Weight: </label>
                        </div>

                        @for (int i = 0; i < numberOfExercisesInWorkout; i++)
                        {
                            var j = i;
                            if (j >= listOfUserExercisesInSelectedDay.Count)
                            {
                                listOfUserExercisesInSelectedDay.Add(new UserExercise());
                            }

                            <div class="row-cols-md-auto">
                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height" id="exerciseType" @bind-Value="listOfUserExercisesInSelectedDay[j].ExerciseType" @bind-Value:after="() => GetExercisesByExerciseType(j)">
                                    <option value="" disabled selected> -- Select Exercise Type -- </option>
                                    @foreach (var type in Enum.GetValues(typeof(ExerciseType)))
                                    {
                                        <option value="@type">@type</option>
                                    }
                                </InputSelect>


                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height" id="exerciseName" @bind-Value="listOfUserExercisesInSelectedDay[j].Name" @bind-Value:after="() => BindValuesFromDtoToUserExercise(listOfUserExercisesInSelectedDay[j],listOfUserExercisesInSelectedDay[j].Name,listOfExercisesByWorkoutType)">
                                    <option value="" disabled selected> -- Select Exercise -- </option>
                                    @foreach (var exercise in listOfUserExercisesInSelectedDay[j].FilteredExercises)
                                    {
                                        <option value="@exercise.Name">@exercise.Name</option>
                                    }
                                </InputSelect>
                                <input class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-input-width" type="number" id="sets" @bind="listOfUserExercisesInSelectedDay[j].Sets" />
                                <input class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-input-width" type="number" id="reps" @bind="listOfUserExercisesInSelectedDay[j].Repetitions" />
                                <input class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-input-width" type="number" id="weight" @bind="listOfUserExercisesInSelectedDay[j].Weight" />
                            </div>
                        }
                        <div class="d-flex justify-content-center">
                            <button class="btn btn-primary mt-3 rounded-pill shadow-lg mb-4 border border-2 border-dark poppins-medium" @onclick="SaveWorkout">Save Workout</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    
}

@code {
    private string[] daysOfWeek = new string[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
    private Plan plan = new();
    private UserExercise userExercise = new();
    private int numberOfExercisesInWorkout = 2;
    private Dictionary<string, List<UserExercise>> DictionaryOfListOfUserExerciseForSelectedDay = new();
    private string selectedDay = string.Empty;
    private List<UserExercise> listOfUserExercisesInSelectedDay = new();
    private List<UserWorkout> workoutListForCurrentPlan = new();
    private bool displayDayViewWorkout = false;
    public List<ExerciseDTO> listOfExercisesByWorkoutType = new();

    protected override void OnInitialized()
    {
        foreach (var day in daysOfWeek)
        {
            if (!DictionaryOfListOfUserExerciseForSelectedDay.ContainsKey(day))
            {
                DictionaryOfListOfUserExerciseForSelectedDay[day] = new List<UserExercise>();
            }
        }
    }

    private void UserSelectsDay(string day)
    {
        selectedDay = day;
        listOfUserExercisesInSelectedDay = DictionaryOfListOfUserExerciseForSelectedDay[day];
        displayDayViewWorkout = true;
    }

    private void SaveWorkout()
    {
        DictionaryOfListOfUserExerciseForSelectedDay[selectedDay] = listOfUserExercisesInSelectedDay;

        UserWorkout userWorkout = new UserWorkout
            {
                PlanId = plan.Id, // Ensure to set this before saving
                UserExercises = listOfUserExercisesInSelectedDay
            };

        workoutListForCurrentPlan.Add(userWorkout);
        displayDayViewWorkout = false;
    }

    private string GetWorkoutSummary(string day)
    {
        if (DictionaryOfListOfUserExerciseForSelectedDay.TryGetValue(day, out var exercises) && exercises.Any())
        {
            return string.Join(", ", exercises.Select(e => $"{e.Name} ({e.Sets} x {e.Repetitions}) - {e.Weight}"));
        }
        return "You haven't added any workouts here yet. Are you taking an off day?";
    }

    private async Task AddNewPlan()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                plan.ApplicationUserId = userId;
            }

            var transaction = await ApplicationDbContext.Database.BeginTransactionAsync();
            try
            {
                int planId = await planRepository.AddPlan(plan);

                foreach (UserWorkout userworkout in workoutListForCurrentPlan)
                {
                    userworkout.PlanId = planId;
                    await userWorkoutRepository.AddWorkout(userworkout);
                }

                await transaction.CommitAsync();
                plan = new Plan();
                NavManager.NavigateTo($"/");
            }
            catch (Exception e)
            {
                await transaction.RollbackAsync();
                throw new Exception($"Something went wrong with the database transaction: {e.Message}");
            }
        }
    }

    public async Task GetExercisesByWorkoutType()
    {
        listOfExercisesByWorkoutType = await userExerciseRepository.GetExercisesBasedOnWorkoutType(userExercise.WorkoutType);
        foreach (var exercise in listOfUserExercisesInSelectedDay)
        {
            exercise.FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, exercise.ExerciseType);
        }
        StateHasChanged();
    }

    public async Task GetExercisesByExerciseType(int index)
    {
        var selectedExerciseType = listOfUserExercisesInSelectedDay[index].ExerciseType;
        listOfUserExercisesInSelectedDay[index].FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, selectedExerciseType);
        await InvokeAsync(StateHasChanged);
    }

    // So ultimately we need 4 methods. We need the method that runs all of the methods we need to get an exerciseId from Name, workoutType from Name, and exerciseType by Name.
    // I would rather do this and have the binded value show up in the week view for the name and then get the other values based on the name.
    // ChatGPT recommended something different but this is how I think it should work given what I want and best coding practices.
    // The main method is probably going to take in a reference parameter which will be changed which will the the particular instance of userExercise
    // The main method will also take in the userExercise Name to filter based on a listofFilteredExercise which we'll also probably have to include as a parameter 
    // We use the listofExercisesForSelectedDay variable to filter and retrive information as it is undoubtedly in scope.
    // Need to refactor all of this and put it somewhere else because this razor component is becoming ridiculous.
    public void PutExerciseIdInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
        userExercise.ExerciseId = filteredExercise.ExerciseId;
    }

    public void PutWorkoutTypeInUserExerciseBasedOnName(UserExercise userExercise,string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        // Question: Do we need to specify keywords out or ref here is we are ultimately editing the value currently in userExercise?
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
        userExercise.WorkoutType = filteredExercise.WorkoutType;
    }

    public void PutExerciseTypeInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault(); // Really this should be put into its own method
        userExercise.ExerciseType = filteredExercise.ExerciseType;
    }

    public void BindValuesFromDtoToUserExercise(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        PutExerciseIdInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutExerciseTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutWorkoutTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
    }

    public string GetWorkoutTypeByDay(string day)
    {
        var userWorkout = DictionaryOfListOfUserExerciseForSelectedDay[day];
        var userExercises = userWorkout.FirstOrDefault();
        var enumValue = userExercise.WorkoutType;

        switch(enumValue)
        {
            case WorkoutType.UpperBodyStrength:

                return "Upper Body Day";
                break;

            case WorkoutType.LowerBodyStrength:

                return "Leg Day!";
                break;

            default:
                return "Nothing going on today";
                break;
        }
    }
        
}
