@page "/add-plan"
@using FitskedApp.DTO
@using FitskedApp.Data
@using FitskedApp.Models
@using FitskedApp.Utilities
@rendermode InteractiveServer
@inject IUserPlanRepository planRepository
@inject IUserExerciseRepository userExerciseRepository
@inject IUserWorkoutRepository userWorkoutRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext ApplicationDbContext
@inject NavigationManager NavManager


    <div class="@((displayDayViewWorkout ? "blurred" : ""))">
        <div class="d-flex justify-content-center">
            <form>
                <div class="col-12 mb-3">
                    <label class="text-black mt-5 pt-2 d-flex justify-content-center poppins-medium" for="PlanName">Plan Name</label>
                <input class="form-control mt-1 w-100 rounded-pill inner-input-shadow border-3 border border-warning" type="text" id="PlanName" @bind="plan.Name" />
                </div>
            </form>
        </div>

        <div class="row border-4 rounded-div border border-warning p-3 bg-white w-auto mb-2 inner-input-shadow">
            @foreach (var day in daysOfWeek)
            {

            <div class="col text-center mt-2 mb-2 m-lg-2 mr-2 day-card rounded-div col text-center mt-2 mb-2 m-lg-2 mr-2 day-card rounded-div border border-3 border-danger" @onclick="() => { if (!displayDayViewWorkout) UserSelectsDay(day); }">
                    <h5 class="mt-2 poppins-medium"> @day </h5>
                    <div class="border-top pt-3 row">
                        <p class="poppins-bold">  @GetWorkoutTypeByDay(day) </p> 
                        <br />
                        <p class="poppins-medium exercise-summary-font"> @GetWorkoutSummary(day)</p>
                        
                    </div>
                </div>
            }
        </div>

        <div class="d-flex justify-content-center mt-3">
            <button class="rounded-pill w-25 mb-2 poppins-medium border border-3 border-danger bg-white p-2 main-button" @onclick="() => { if (!displayDayViewWorkout) AddNewPlan();}"> Add Plan </button>
        </div>
    </div>


@if(displayDayViewWorkout)
{
    <div class="overlay">
        <div class="d-flex justify-content-center">
            <div class="bg-white rounded-div w-75 border border-4 border-danger shadow-sm mb-3 mt-4 day-view-modal">
                <div class="d-flex justify-content-center">
                    <h5 class="mt-2 poppins-bold">@selectedDay</h5>
                </div>
                <hr class="border border-2 border-danger" />
                <div class="container d-flex justify-content-center">
                    <EditForm Model="userExercise">
                        <DataAnnotationsValidator />

                        @* <label for="workoutType"> Workout Type: </label> *@
                        <div class="d-flex justify-content-center">
                            <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height justify-content-center d-flex w-50 text-center" id="workoutType" @bind-Value="userExercise.WorkoutType" @bind-Value:after="GetExercisesByWorkoutType">
                                @foreach (var type in Enum.GetValues(typeof(WorkoutType)).Cast<WorkoutType>().Take(2))
                                {
                                    <option value="@type"> @StringValuesForWorkoutType[type] </option>
                                }
                            </InputSelect>
                        </div>
                        <br />
                        @for (int i = 0; i < numberOfExercisesInWorkout; i++)
                        {
                            var j = i;
                            if (j >= listOfUserExercisesInSelectedDay.Count)
                            {
                                listOfUserExercisesInSelectedDay.Add(new UserExercise());
                            }

                            <div class="d-flex justify-content-lg-between mb-2">

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-3 text-center" id="exerciseType" @bind-Value="listOfUserExercisesInSelectedDay[j].ExerciseType" @bind-Value:after="() => GetExercisesByExerciseType(j)">
                                    <option value="" disabled selected> -- Select Exercise Type -- </option>
                                    @foreach (var type in Enum.GetValues(typeof(ExerciseType)))
                                    {
                                        <option value="@type">@type</option>
                                    }
                                </InputSelect>


                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-4 text-center" id="exerciseName" @bind-Value="listOfUserExercisesInSelectedDay[j].Name" @bind-Value:after="() => BindValuesFromDtoToUserExercise(listOfUserExercisesInSelectedDay[j],listOfUserExercisesInSelectedDay[j].Name,listOfExercisesByWorkoutType)">
                                    <option value="" disabled selected> -- Select Exercise -- </option>
                                    @foreach (var exercise in listOfUserExercisesInSelectedDay[j].FilteredExercises)
                                    {
                                        <option value="@exercise.Name">@exercise.Name</option>
                                    }
                                </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-1 text-center" id="sets" @bind-Value="listOfUserExercisesInSelectedDay[j].Sets">
                                    <option value="" disabled selected> -- Sets -- </option>
                                    @foreach (var setNumber in ListOfSets)
                                    {
                                        <option value="@setNumber">@setNumber</option>
                                    }
                                </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-2 text-center" id="reps" @bind-Value="listOfUserExercisesInSelectedDay[j].Repetitions">
                                    <option value="" disabled selected> -- Reps -- </option>
                                    @foreach (var repNumber in ListOfReps)
                                    {
                                        <option value="@repNumber">@repNumber</option>
                                    }
                                </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-2 text-center" id="weight" @bind-Value="listOfUserExercisesInSelectedDay[j].Weight">
                                    <option value="" disabled selected> -- Weight -- </option>
                                    @foreach (var weightNumber in ListOfWeight)
                                    {
                                        <option value="@weightNumber">@weightNumber lbs.</option>
                                    }
                                </InputSelect>
                            </div>
                        }

                        <div class="d-flex justify-content-center">
                            <button class="mt-3 rounded-pill mb-4 border border-2 border-danger poppins-medium bg-white main-button p-2" @onclick="SaveWorkout">Save Workout</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    
}

@code {
    private string[] daysOfWeek = new string[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
    private Plan plan = new();
    private UserExercise userExercise = new();
    private int numberOfExercisesInWorkout = 2;
    private Dictionary<string, List<UserExercise>> DictionaryOfListOfUserExerciseForSelectedDay = new();
    private string selectedDay = string.Empty;
    private List<UserExercise> listOfUserExercisesInSelectedDay = new();
    private List<UserWorkout> workoutListForCurrentPlan = new();
    private bool displayDayViewWorkout = false;
    public List<ExerciseDTO> listOfExercisesByWorkoutType = new();
    private static readonly Dictionary<WorkoutType, string> StringValuesForWorkoutType = new()
    {
            {WorkoutType.UpperBodyStrength, "Upper Body" },
            {WorkoutType.LowerBodyStrength, "Lower Body" }
    };
    public WorkoutType workoutType = new();

    private List<int> ListOfSets = ListOfNumberHelper.GenerateListOfNumbers(1, 10, 1);
    private List<int> ListOfReps = ListOfNumberHelper.GenerateListOfNumbers(2, 20, 2);
    private List<int> ListOfWeight = ListOfNumberHelper.GenerateListOfNumbers(5, 405, 5);

    protected override void OnInitialized()
    {
        foreach (var day in daysOfWeek)
        {
            if (!DictionaryOfListOfUserExerciseForSelectedDay.ContainsKey(day))
            {
                DictionaryOfListOfUserExerciseForSelectedDay[day] = new List<UserExercise>();
            }
        }
    }

    private void UserSelectsDay(string day)
    {
        selectedDay = day;
        listOfUserExercisesInSelectedDay = DictionaryOfListOfUserExerciseForSelectedDay[day];
        displayDayViewWorkout = true;
    }

    private void SaveWorkout()
    {
        DictionaryOfListOfUserExerciseForSelectedDay[selectedDay] = listOfUserExercisesInSelectedDay;

        UserWorkout userWorkout = new UserWorkout
            {
                PlanId = plan.Id, // Ensure to set this before saving
                UserExercises = listOfUserExercisesInSelectedDay
            };

        workoutListForCurrentPlan.Add(userWorkout);
        displayDayViewWorkout = false;
    }

    public string GetWorkoutTypeByDay(string day)
    {
        if (DictionaryOfListOfUserExerciseForSelectedDay.TryGetValue(day, out var userWorkout) && userWorkout?.Any() == true)
        {
            var userExercise = userWorkout.FirstOrDefault();
            if (userExercise != null)
            {
                var enumValue = userExercise.WorkoutType;
                switch (enumValue)
                {
                    case WorkoutType.UpperBodyStrength:
                        return "Upper Body";

                    case WorkoutType.LowerBodyStrength:
                        return "Lower Body";

                    default:
                        return "Nothing going on today";
                }
            }
        }
        return "Nothing going on today";
    }

    private string GetWorkoutSummary(string day)
    {
        if (DictionaryOfListOfUserExerciseForSelectedDay.TryGetValue(day, out var exercises) && exercises.Any())
        {
            return string.Join(" ",exercises.Select(e => $"{e.Name} ({e.Sets}x{e.Repetitions}) - {e.Weight}lbs"));
        }
        return "Rest Day. Alas..";
    }

    private async Task AddNewPlan()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                plan.ApplicationUserId = userId;
            }

            var transaction = await ApplicationDbContext.Database.BeginTransactionAsync();
            try
            {
                int planId = await planRepository.AddPlan(plan);

                foreach (UserWorkout userworkout in workoutListForCurrentPlan)
                {
                    userworkout.PlanId = planId;
                    await userWorkoutRepository.AddWorkout(userworkout);
                }

                await transaction.CommitAsync();
                plan = new Plan();
                NavManager.NavigateTo($"/");
            }
            catch (Exception e)
            {
                await transaction.RollbackAsync();
                throw new Exception($"Something went wrong with the database transaction: {e.Message}");
            }
        }
    }

    public async Task GetExercisesByWorkoutType()
    {
        listOfExercisesByWorkoutType = await userExerciseRepository.GetExercisesBasedOnWorkoutType(userExercise.WorkoutType);
        foreach (var exercise in listOfUserExercisesInSelectedDay)
        {
            exercise.FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, exercise.ExerciseType);
        }
        StateHasChanged();
    }

    public async Task GetExercisesByExerciseType(int index)
    {
        var selectedExerciseType = listOfUserExercisesInSelectedDay[index].ExerciseType;
        listOfUserExercisesInSelectedDay[index].FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, selectedExerciseType);
        await InvokeAsync(StateHasChanged);
    }

    public void PutExerciseIdInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
        userExercise.ExerciseId = filteredExercise.ExerciseId;
    }

    public void PutWorkoutTypeInUserExerciseBasedOnName(UserExercise userExercise,string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        // Question: Do we need to specify keywords out or ref here is we are ultimately editing the value currently in userExercise?
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
        userExercise.WorkoutType = filteredExercise.WorkoutType;
    }

    public void PutExerciseTypeInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault(); // Really this should be put into its own method
        userExercise.ExerciseType = filteredExercise.ExerciseType;
    }

    public void BindValuesFromDtoToUserExercise(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        PutExerciseIdInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutExerciseTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutWorkoutTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
    } 
}
