@using FitskedApp.Models
@using FitskedApp.Data
@rendermode InteractiveServer
@inject IUserWorkoutRepository WorkoutRepository
@page "/workout/{PlanId:int}"

<h3>Create Plan</h3>

<div class="row border border-dark p-3">
    @foreach (var day in daysOfWeek)
    {
        <div class="col text-center" @onclick="() => UserSelectsDay(day)">
            <h5> @day </h5>
            <div class="workout-body border-top pt-3 row">
                <label> Exercise Details (for selected day): </label>
                <p> @GetWorkoutSummary(day)</p>
            </div>
        </div>
    }
</div>


@if (displayDayViewWorkout) // displayDayViewWorkout variable changes to true when the above userSelectsDay method is called via the ononclick event handler
{
    <div class="day-view-modal">
        <h5>@selectedDay</h5> @* This variable changes to the "selected day" based on the "day" variable passed in the above userSelectsDay method *@

        <form>
            @for (int i = 0; i < numberOfExercisesInWorkout; i++)
            {
                var j = i;
                if (j >= exerciseListForSelectedDay.Count)
                {
                    exerciseListForSelectedDay.Add(new UserExercise());
                }

                <div>
                    <label for="name"> Exercise Name: </label>
                    <input type="text" id="name" @bind="exerciseListForSelectedDay[j].Name" />

                    <label for="sets"> Sets: </label>
                    <input type="number" id="sets" @bind="exerciseListForSelectedDay[j].Sets" />

                    <label for="reps"> Reps: </label>
                    <input type="number" id="reps" @bind="exerciseListForSelectedDay[j].Repetitions" />

                    <label for="weight"> Weight: </label>
                    <input type="number" id="weight" @bind="exerciseListForSelectedDay[j].Weight" />

                    @* Need to have a method that converts lbs to kgs as these two measurements are very common across the fitness industry*@
                </div>
            }
        </form>



        <button class="btn btn-primary mt-3" @onclick="SaveWorkout">Save Workout to In-Memory Dictionary/Return to Week View.</button> @* displayWeekView changed to false by the saveWorkout method*@
    </div>
}


@code {
    private string[] daysOfWeek = new string[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

    private int numberOfExercisesInWorkout = 7; // I want make the number of exercises any given workout to 7 (This is an opinionated number I'm setting for my app based on my beliefs on how to structure of a typical workout should be. I want to app to provide users with structure so they don't have to think about how many exercises they should have in they're workout.

    public UserWorkout UserWorkout = new();

    private UserExercise UserExercise = new();

    private Dictionary<string, List<UserExercise>> DictionaryOfListOfUserExerciseForSelectedDay = new();

    private string selectedDay = string.Empty;

    private List<UserExercise> exerciseListForSelectedDay = new List<UserExercise>(); // We already have a list of userexercise in dictionary, I don't think we need this one but we'll leave it in here for context

    private bool displayDayViewWorkout = false;

    protected override void OnInitialized()
    {
        foreach (var day in daysOfWeek)
        {
            if (!DictionaryOfListOfUserExerciseForSelectedDay.ContainsKey(day))
            {
                DictionaryOfListOfUserExerciseForSelectedDay[day] = new List<UserExercise>();
            }
        }
    }

    private void UserSelectsDay(string day)
    {
        selectedDay = day;
        exerciseListForSelectedDay = DictionaryOfListOfUserExerciseForSelectedDay[day];
        displayDayViewWorkout = true;
    }

    private void SaveWorkout()
    {
        DictionaryOfListOfUserExerciseForSelectedDay[selectedDay] = exerciseListForSelectedDay;
        displayDayViewWorkout = false;
    }

    private string GetWorkoutSummary(string day)
    {
        if (DictionaryOfListOfUserExerciseForSelectedDay.ContainsKey(day))
        {
            var exercises = DictionaryOfListOfUserExerciseForSelectedDay[day];
            if (exercises.Count == 0)
            {
                return "You haven't added any workouts here yet. Are you taking an off day?";
            }
            string summary = "";
            foreach (UserExercise userExercise in exercises)
            {
                summary += $"{userExercise.Name} ({userExercise.Sets} x {userExercise.Repetitions}) - {userExercise.Weight}|";
            }
            return summary.TrimEnd(' ', '|');
        }
        return "You haven't added any workouts here yet. Are you taking an off day?";
    }

    [Parameter]
    public int PlanId { get; set; } 
}
