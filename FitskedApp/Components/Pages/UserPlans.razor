@page "/user-plans"
@using FitskedApp.Data.Repository
@using FitskedApp.Data.Repository
@using FitskedApp.Models
@rendermode InteractiveServer
@inject IUserRepository userRepository
@inject IUserPlanRepository planRepository
@inject NavigationManager navigationManager

<PageTitle> My Plans </PageTitle>


<div class="d-flex justify-content-center mt-5 pt-5">
    <section class="border border-4 border-warning shadow m-5 rounded-div p-4" style="width: 30rem;">
        <div class="overflow-auto" style="height: 300px;">
            @foreach (Plan plan in planList)
            {
                <div class="row text-center mt-2 mb-2 m-lg-2 mr-2 rounded-div border border-3 border-danger pt-1 pb-1">
                    <div class="col-6 d-flex align-items-center justify-content-center">
                        <h6 class="poppins-medium"> @plan.Name </h6>
                    </div>
                    <a class="col-3 d-flex align-items-center justify-content-center" href="/edit-plan/@plan.Name/@plan.Id">
                        <button class="bg-white p-2 border border-2 border-danger rounded-pill poppins-medium main-button"> Edit </button> <!-- Use Bootstrap button classes for styling -->
                    </a>

                    <div class="col-3 d-flex align-items-center justify-content-center">
                        <button @onclick="() => DeletePlan(plan.Id)" class="bg-white p-2 border border-2 border-danger rounded-pill poppins-medium main-button"> Delete </button> <!-- Use Bootstrap button classes for styling -->
                    </div>
                </div>   
            }
        </div>
    </section>
</div>



@code {

    string? userId;
    List<Plan> planList = new();
    public string PlanName;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserPlans();
    }

    private async Task LoadUserPlans()
    {
        userId = await userRepository.GetCurrentUserUserId();
        planList = await planRepository.GetAllPlansByUserId(userId);
    }

    private async Task DeletePlan(int planid)
    {
        await planRepository.DeletePlanAsync(planid);
        var planToRemove = planList.Where(e => e.Id == planid).FirstOrDefault();
        planList.Remove(planToRemove);

        StateHasChanged();
    }

    
}

