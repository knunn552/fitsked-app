@page "/edit-plan/{planName}/{planId:int}"
@using FitskedApp.DTO
@using FitskedApp.Data
@using FitskedApp.Models
@using FitskedApp.Utilities
@using FitskedApp.Data.Repository
@using FitskedApp.Data.Service
@using FitskedApp.Helpers
@rendermode InteractiveServer
@inject IUserPlanRepository planRepository
@inject IUserExerciseRepository userExerciseRepository
@inject IUserWorkoutRepository userWorkoutRepository
@inject IExerciseService exerciseService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext ApplicationDbContext
@inject IFilteredExercisesManager exercisesFilterManager
@inject NavigationManager NavManager
@inject NavigationLinks navLinksManager


<PageTitle> Edit Plan </PageTitle>

    <div class="@((displayDayViewWorkout ? "blurred" : ""))">
        <div class="d-flex justify-content-center">
        <h1 class="poppins-bold text-primary pt-1 fs-1 text-black"> @PlanName</h1>
        </div>

    <div class="row border-4 rounded-div border border-warning p-3 bg-white w-auto mb-2 inner-input-shadow">
        @foreach (var day in daysOfWeek)
        {
            if (ListOfUserExercisePerDay.TryGetValue(day, out var exercises))
            {
                <div class="col text-center mt-2 mb-2 m-lg-2 day-card rounded-div mr-1 rounded-div border border-3 border-danger ps-2 pe-2"
                     @onclick="() => { if (!displayDayViewWorkout) UserSelectsDay(day); }">
                    <h5 class="mt-2 poppins-medium"> @day </h5>
                    <hr />
                    <div class="pt-1">
                        <p class="poppins-bold">  @GetWorkoutTypeByDay(day) </p>
                        <table class="table table-striped table-bordered table-sm table-extra-small-font rounded-div">
                            <thead>
                                <tr>
                                    <th scope="col">Exercise</th>
                                    <th scope="col">Sets</th>
                                    <th scope="col">Reps</th>
                                    <th scope="col">Weight</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var userExercise in exercises)
                                {
                                    <tr>
                                        <td>@userExercise.Name</td>
                                        <td>@userExercise.Sets</td>
                                        <td>@userExercise.Repetitions</td>
                                        <td>@userExercise.Weight</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <p class="poppins-medium exercise-summary-font"> @GetWorkoutSummary(day) </p>
                    </div>
                </div>
            }
            else
            {
                <div class="col text-center mt-2 mb-2 m-lg-2 day-card rounded-div mr-1 rounded-div border border-3 border-danger ps-2 pe-2">
                    <h5 class="mt-2 poppins-medium"> @day </h5>
                    <p class="poppins-medium exercise-summary-font"> No exercises for this day. </p>
                </div>
            }
        }
    </div>


    <div>
        <div class="d-flex justify-content-center mt-3">
            <button class="rounded-pill w-25 mb-2 poppins-medium border border-3 border-danger bg-white p-2 main-button" @onclick="navLinksManager.GoToAddPlanPage"> Add New Plan </button>
        </div>
    </div>
    <div>
        <div class="d-flex justify-content-center mt-3">
        <button class="rounded-pill w-25 mb-2 poppins-medium border border-3 border-danger bg-white p-2 main-button" @onclick="() => { if (!displayDayViewWorkout) UpdatePlanAsync();}"> Update Plan </button>
        </div>
    </div>
    </div>

@if(displayDayViewWorkout)
{
    <div class="overlay">
        <div class="d-flex justify-content-center">
            <div class="bg-white rounded-div w-75 border border-4 border-danger shadow-sm mb-3 mt-4 day-view-modal">
                <div class="d-flex justify-content-center">
                    <h5 class="mt-2 poppins-bold">@selectedDay</h5>
                </div>
                <hr class="border border-2 border-danger" />
                <div class="container d-flex justify-content-center">
                    <EditForm Model="userExercise.WorkoutType">
                        <DataAnnotationsValidator />

                        @* @if ((userSelectedWorkoutTypeInDayView == false) && (UserClickCountPerDay[selectedDay] != 1))
                        {
                            @if(GetWorkoutTypeByDay(selectedDay) != "Workout Type")
                            {
                                <div class="d-flex justify-content-center pt-2">
                                    <p> <span class="poppins-bold" style="color:red"> IMPORTANT: </span> To load existing workout, reselect <span class="poppins-bold"> @GetWorkoutTypeByDay(selectedDay) </span>. To change workout type, pick a new one and start fresh. </p>
                                </div>
                            }
                            
                            <div class="d-flex justify-content-center">
                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height justify-content-center d-flex w-50 text-center blinking-border" id="workoutType" @bind-Value="userExercise.WorkoutType" @bind-Value:after="() => FilterExercisesByWorkoutTypeAsync(selectedDay)">
                                    @foreach (var type in Enum.GetValues(typeof(WorkoutType)).Cast<WorkoutType>().Take(3))
                                    {
                                        if (type == WorkoutType.FillerValue)
                                        {
                                            <option value="@type" disabled selected>@StringValuesForWorkoutType[type]</option>
                                        }
                                        else
                                        {
                                            <option value="@type">@StringValuesForWorkoutType[type]</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        }
                        else
                        { *@
                            <div class="d-flex justify-content-center">
                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height justify-content-center d-flex w-50 text-center" id="workoutType" @bind-Value="userExercise.WorkoutType" @bind-Value:after="() => FilterExercisesByWorkoutTypeAsync(selectedDay)">
                                    @foreach (var type in Enum.GetValues(typeof(WorkoutType)).Cast<WorkoutType>().Take(3))
                                    {
                                        if (type == WorkoutType.FillerValue)
                                        {
                                            <option value="@type" disabled selected hidden>@StringValuesForWorkoutType[type]</option>
                                        }
                                        else
                                        {
                                            <option value="@type">@StringValuesForWorkoutType[type]</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        @* } *@


                        @for (int i = 0; i < UserExerciseTotalCountPerDay[selectedDay]; i++)
                        {
                            var j = i;
                            if (j >= listOfUserExercisesInSelectedDay.Count)
                            {
                                listOfUserExercisesInSelectedDay.Add(new UserExercise());
                            }

                            <div class="d-flex justify-content-center mb-2">

                                <a class="text-decoration-none col-1 d-flex justify-content-center align-items-center" @onclick="() => (navLinksManager.GoToNavigationLink(listOfUserExercisesInSelectedDay[j].VideoUrl))">
                                    <i class="fa-solid fa-video fa-xl"></i>
                                </a>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-3 text-center" id="exerciseType" @bind-Value="listOfUserExercisesInSelectedDay[j].ExerciseType" @bind-Value:after="() => ChangeExercisePoolBasedOnExerciseType(j)">
                                    @foreach (var type in Enum.GetValues(typeof(ExerciseType)).Cast<ExerciseType>().Take(4))
                                    {
                                        if (type == ExerciseType.FillerValue)
                                        {
                                            <option value="@type" disabled selected hidden>@StringValuesForExerciseType[type]</option>
                                        }
                                        else
                                        {
                                            <option value="@type">@StringValuesForExerciseType[type]</option>
                                        }
                                    }
                                </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-4 text-center" id="exerciseName" @bind-Value="listOfUserExercisesInSelectedDay[j].Name" @bind-Value:after="() => BindValuesFromDTOToUserExercise(listOfUserExercisesInSelectedDay[j],listOfUserExercisesInSelectedDay[j].Name,listOfExercisesByWorkoutType,selectedDay,j)">
                                    <option value="" disabled selected> -- Select Exercise -- </option>
                                    @foreach (var exercise in listOfUserExercisesInSelectedDay[j].FilteredExercises)
                                    {
                                        <option value="@exercise.Name">@exercise.Name</option>
                                    }
                                </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-1 text-center" id="sets" @bind-Value="listOfUserExercisesInSelectedDay[j].Sets">
                                    <option value="" disabled selected> -- Sets -- </option>
                                    @foreach (var setNumber in ListOfSets)
                                    {
                                        <option value="@setNumber">@setNumber</option>
                                    }
                                </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-1 text-center" id="reps" @bind-Value="listOfUserExercisesInSelectedDay[j].Repetitions">
                                    <option value="" disabled selected> -- Reps -- </option>
                                    @foreach (var repNumber in ListOfReps)
                                    {
                                        <option value="@repNumber">@repNumber</option>
                                    }
                                </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-2 text-center" id="weight" @bind-Value="listOfUserExercisesInSelectedDay[j].Weight">
                                    <option value="" disabled selected> -- Weight -- </option>
                                    @foreach (var weightNumber in ListOfWeight)
                                    {
                                        <option value="@weightNumber">@weightNumber lbs.</option>
                                    }
                                </InputSelect>

                                @if ((j > 0) && (j == UserExerciseTotalCountPerDay[selectedDay] - 1))
                                {
                                    <button class="end-0 user-exercise-select-height col-1 bg-white border border-0" style="color:darkred"
                                            @onclick="() => ThingsToDoOnClickRemove(selectedDay, j, listOfUserExercisesInSelectedDay[j].Name, listOfUserExercisesInSelectedDay[j],listOfUserExercisesInSelectedDay[j].Id)">
                                        <i class="fa-solid fa-trash-can fa-xl"></i>
                                    </button>
                                }
                                else
                                {
                                    <button class="end-0 user-exercise-select-height col-1 bg-white border border-0"
                                            style="visibility: hidden; color:darkred">
                                        <i class="fa-solid fa-trash-can fa-xl"></i>
                                    </button>
                                }
                                
                            </div>
                        }
                        <div>
                            <button class="mt-3 rounded-pill mb-4 border border-2 border-danger poppins-medium bg-white main-button p-2" @onclick="() => AddAdditionalExerciseToWorkout(selectedDay)">
                                Add Exercise
                            </button>
                        </div>

                        <div class="d-flex justify-content-center">
                            <button class="mt-3 rounded-pill mb-4 border border-2 border-danger poppins-medium bg-white main-button p-2" @onclick="SaveUserWorkoutToInMemoryListOfUserWorkouts">Save Workout</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    
}

@code {
    [Parameter]
    public string PlanName { get; set; }
    [Parameter]
    public int PlanId { get; set; }

    private Plan plan = new();
    private UserExercise userExercise = new();
    public WorkoutType workoutType = new();


    private bool displayDayViewWorkout = false;
    private bool displayUnselectedWorkoutDays = false;
    private bool displayBlankPlanError = false;
    private bool userHasEnteredPlanName = false;
    // private bool userSelectedWorkoutTypeInDayView = false;
    private bool userSelectedExerciseTypeInDayView = true;
    private bool userSelectedExerciseInDayView = true;
    private int numberOfExercisesInWorkout = 1;
    private string selectedDay = string.Empty;


    private string[] daysOfWeek = new string[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

    private List<UserWorkout> workoutListForCurrentPlan = new(); // This is what we'll use to retrive the current list of userworkouts for the specific planid that were working with. This is also what we use to store the final result of the plan in to update plan. Totally different and seperate from filtering data structures.
    private List<UserExercise> listOfUserExercisesInSelectedDay = new();
    public List<ExerciseDTO> listOfExercisesByWorkoutType = new();
    private List<ExerciseDTO> fullListOfExerciseDTO = new(); // This came from AddPlan
    private List<ExerciseDTO> listStoringSelectedExercises = new(); // This came from AddPlan // Make sure that workoutListForCurrentPlan and fullListOfExerciseDto don't collide
    private List<int> ListOfSets = ListOfNumberHelper.GenerateListOfNumbers(1, 10, 1);
    private List<int> ListOfReps = ListOfNumberHelper.GenerateListOfNumbers(2, 20, 2);
    private List<int> ListOfWeight = ListOfNumberHelper.GenerateListOfNumbers(5, 405, 5);
    private List<int> TrackedListOfEditedExerciseIds = new();
    private List<int> TrackedListOfDeletedExerciseIds = new();

    public Dictionary<string, int> UserClickCountPerDay = new Dictionary<string, int>
    {
        { "Sunday", 0},
        { "Monday", 0},
        { "Tuesday", 0},
        { "Wednesday", 0},
        { "Thursday", 0},
        { "Friday", 0},
        { "Saturday", 0}
    };
    private static readonly Dictionary<WorkoutType, string> StringValuesForWorkoutType = new()
    {
            {WorkoutType.FillerValue, " -- Workout Type -- "},
            {WorkoutType.UpperBodyStrength, "Upper Body" },
            {WorkoutType.LowerBodyStrength, "Lower Body" }
    };
    private static readonly Dictionary<ExerciseType, string> StringValuesForExerciseType = new()
    {
        {ExerciseType.FillerValue, " -- Exercise Type -- "},
        {ExerciseType.Core, "Core"},
        {ExerciseType.Secondary, "Secondary"},
        {ExerciseType.Accessory, "Accessory"}
    };
    private Dictionary<string, List<UserExercise>> ListOfUserExercisePerDay = new(); // Need this to populate a list of user exercises for a given workout/day
    private Dictionary<string, int> ListPositionForDay = new Dictionary<string, int>
{
    { "Sunday", 0 },
    { "Monday", 1 },
    { "Tuesday", 2 },
    { "Wednesday", 3 },
    { "Thursday", 4 },
    { "Friday", 5 },
    { "Saturday", 6 }
}; // This was already in ViewEditPlan 
    public Dictionary<string, int> UserExerciseTotalCountPerDay = new Dictionary<string, int>
    {
        { "Sunday", 1},
        { "Monday", 1 },
        { "Tuesday", 1},
        { "Wednesday", 1},
        { "Thursday", 1 },
        { "Friday", 1},
        { "Saturday", 1}
    }; // This was already in ViewEditPlan
    public Dictionary<string, Dictionary<int, string>> previousExerciseSelectionsPerDay = new()
{
    { "Sunday", new Dictionary<int, string>() },
    { "Monday", new Dictionary<int, string>() },
    { "Tuesday", new Dictionary<int, string>() },
    { "Wednesday", new Dictionary<int, string>() },
    { "Thursday", new Dictionary<int, string>() },
    { "Friday", new Dictionary<int, string>() },
    { "Saturday", new Dictionary<int, string>() }
}; // This came from AddPlan // This tells us what the selected exercise was for a userexercise before removing or modifying the exercise
    public Dictionary<WorkoutType, Dictionary<ExerciseType, List<ExerciseDTO>>> DictionaryStoringFilteredExercises = new()
    {
        // TODO: Fix this. Entirety of logic will most likely need to be redone.
        { WorkoutType.UpperBodyStrength, new Dictionary<ExerciseType, List<ExerciseDTO>>
            {
                { ExerciseType.Core, new List<ExerciseDTO>() },
                { ExerciseType.Secondary, new List<ExerciseDTO>() },
                { ExerciseType.Accessory, new List<ExerciseDTO>() },
                { ExerciseType.FillerValue, new List<ExerciseDTO>()}
            }
        },
        { WorkoutType.LowerBodyStrength, new Dictionary<ExerciseType, List<ExerciseDTO>>
            {
                { ExerciseType.Core, new List<ExerciseDTO>() },
                { ExerciseType.Secondary, new List<ExerciseDTO>() },
                { ExerciseType.Accessory, new List<ExerciseDTO>() },
                { ExerciseType.FillerValue, new List<ExerciseDTO>()}
            }
        },
        { WorkoutType.FillerValue, new Dictionary<ExerciseType, List<ExerciseDTO>>
            {
                { ExerciseType.Core, new List<ExerciseDTO>() },
                { ExerciseType.Secondary, new List<ExerciseDTO>() },
                { ExerciseType.Accessory, new List<ExerciseDTO>() },
                { ExerciseType.FillerValue, new List<ExerciseDTO>()}
            }
        }
    }; // This came from AddPlan // This is the source of truth for all filtered/selected exercises


    protected override async Task OnInitializedAsync()
    {
        plan = planRepository.GetPlanById(PlanId);
        workoutListForCurrentPlan = await userWorkoutRepository.GetListOfUserWorkoutsByPlanIdAsync(PlanId);

        foreach (var day in daysOfWeek)
        {
            if (!ListOfUserExercisePerDay.ContainsKey(day))
            {
                ListOfUserExercisePerDay[day] = new List<UserExercise>();
            }
        }

        MapUserExercisesToDay(workoutListForCurrentPlan, ListOfUserExercisePerDay, daysOfWeek);
        SyncExerciseCountWithDays(workoutListForCurrentPlan, UserExerciseTotalCountPerDay, daysOfWeek);
        fullListOfExerciseDTO = await exerciseService.GetFullExerciseListAsync();

        PutSelectedExercisesInSelectedList(ListOfUserExercisePerDay, listStoringSelectedExercises, fullListOfExerciseDTO);
        MapUserExercisesToFilteredDictionary(ListOfUserExercisePerDay, fullListOfExerciseDTO, DictionaryStoringFilteredExercises);
        RemoveSelectedExercisesFromFullList(ListOfUserExercisePerDay, fullListOfExerciseDTO); // This removes the exercise from the list that we will filter on
        AddExerciseNamesToPreviousSelections();
    }
    private void UserSelectsDay(string day)
    {
        // This is just for the blinking UI effect. We'll probably need to remove it as well because We will have the actual WorkoutType for each UserWorkout or foreach UserExercise in each workout if its not null and if it is then we use filler value
        // if (UserClickCountPerDay[day] < 1)
        // {
        //     userExercise.WorkoutType = WorkoutType.FillerValue;
        // }
        selectedDay = day;
        
        listOfUserExercisesInSelectedDay = ListOfUserExercisePerDay[day]; // Right here the values for the day should be updated. I see. We don't have a statehaschanged. But then again, we shouldn't have to have a state is changed because its the values are bound to the list... Unless Blazors binding feature stopped working.
        UpdateSelectableExerciseListForEachUserExercise(DictionaryStoringFilteredExercises, listOfUserExercisesInSelectedDay);
        numberOfExercisesInWorkout = listOfUserExercisesInSelectedDay.Count;
        userExercise.WorkoutType = listOfUserExercisesInSelectedDay.FirstOrDefault().WorkoutType; // This works, the workouttype is showing, but are the exercises actually filtered per day. At this point, we need to the check if the filtered list is actually filtered by the workout type. If not we need to call the method.
        FilterExercisesByWorkoutTypeAsync(day); // Not sure what this will do but let's see. We hoping that it gives each userrexercise within the workout a list of filtered exercises
                                                // So what we need to do is create method that will bring in a dto from the liststoringselectedexercises based on the name of the userexercise and put that into the list of FilteredExercises for each user exercise.
        PutCurrentExerciseInFilteredList(day);
        
        displayDayViewWorkout = true;
        StateHasChanged();
    }

    public void PutCurrentExerciseInFilteredList(string day)
    {
        List<UserExercise> exerciseList = new();
        exerciseList = ListOfUserExercisePerDay[day];

        foreach(UserExercise exercise in exerciseList)
        {
            ExerciseDTO dTO = new();
            dTO = listStoringSelectedExercises.FirstOrDefault(e => e.Name == exercise.Name); // Can't use Where is the LINQ query because Where returns an IEnumerable. We need a singular DTO
            
            exercise.FilteredExercises.Add(dTO);
            // I'm guessing that the userexercises with filteredexercises being just the selected exercise will be fine. Ones with multiple values will likely need to be filtered. 
        }
    }


    private void SaveUserWorkoutToInMemoryListOfUserWorkouts()
    {
        // userSelectedWorkoutTypeInDayView = false; This was meant to get the blinking functionality to work. Now we may have solved that and the workout type for the respective day shows up.
        if (ListPositionForDay.ContainsKey(selectedDay)) // List position is just telling us which UserExercise we need to edit I think. We can keep that. Not apart of the filtering logic but real logic to impacts db
        {
            ListOfUserExercisePerDay[selectedDay] = listOfUserExercisesInSelectedDay;

            int dayIndex = ListPositionForDay[selectedDay];

            var updatedWorkoutId = workoutListForCurrentPlan[dayIndex].Id;
            workoutListForCurrentPlan.RemoveAt(dayIndex);

            UserWorkout userWorkout = new UserWorkout
                {
                    PlanId = plan.Id,
                    Id = updatedWorkoutId,
                    UserExercises = listOfUserExercisesInSelectedDay
                };

            workoutListForCurrentPlan.Insert(dayIndex, userWorkout);
            displayDayViewWorkout = false;
        }
    }
    public void FilterExercisesByWorkoutTypeAsync(string day)
    {
        listOfExercisesByWorkoutType = exerciseService.GetExerciseListBasedOnWorkoutType(userExercise.WorkoutType, fullListOfExerciseDTO);

        foreach (var exercise in listOfUserExercisesInSelectedDay)
        {
            exercise.FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(
                listOfExercisesByWorkoutType,
                exercise.ExerciseType
            );
        }

        StateHasChanged();
    }
    public async Task ChangeExercisePoolBasedOnExerciseType(int index)
    {
        var selectedExerciseType = listOfUserExercisesInSelectedDay[index].ExerciseType;
        listOfUserExercisesInSelectedDay[index].FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, selectedExerciseType);
        await InvokeAsync(StateHasChanged);
    }
    
    public void PutSelectedExercisesInFilteredBin(
    Dictionary<string, List<UserExercise>> listOfUserExercisePerDay,
    string selectedDay)
    {
        foreach (UserExercise exercise in listOfUserExercisePerDay[selectedDay])
        {
            if (!string.IsNullOrEmpty(exercise.Name))
            {
                ExerciseDTO dto = new ExerciseDTO
                    {
                        Name = exercise.Name,
                        VideoUrl = exercise.VideoUrl,
                        ExerciseType = exercise.ExerciseType,
                        WorkoutType = exercise.WorkoutType
                    };

                DictionaryStoringFilteredExercises[dto.WorkoutType][dto.ExerciseType].Add(dto);
            }
        }
    }
    public void UpdateSelectableExerciseListForEachUserExercise(Dictionary<WorkoutType, Dictionary<ExerciseType, List<ExerciseDTO>>> dictionaryWithSelectedExercises,List<UserExercise> listOfUserExercisesForDay, UserExercise clickedUserExercise)
    {
        if (listOfUserExercisesForDay.Count == 0)
            return;

        foreach (UserExercise userExercise in listOfUserExercisesForDay)
        {
            if (userExercise != clickedUserExercise && userExercise.ExerciseType == clickedUserExercise.ExerciseType)
            {
                UpdateFilteredExercisesForUserExercise(dictionaryWithSelectedExercises, userExercise);
            }
        }

        StateHasChanged();
    }
    
    private void ThingsToDoOnClickRemove(string day, int i, string exerciseName, UserExercise exercise, int id)
    {
        if (!string.IsNullOrEmpty(exerciseName))
        {
            ExerciseDTO exerciseDTO = GetExerciseDTOFromListStoringSelectedExercises(exerciseName);

            exercisesFilterManager.AddItemToList(exerciseDTO, fullListOfExerciseDTO);
            // exercisesFilterManager.AddItemToList(exerciseDTO, intermediaryExerciseList);

            if (previousExerciseSelectionsPerDay.ContainsKey(day)
                && previousExerciseSelectionsPerDay[day].ContainsKey(i))
            {
                previousExerciseSelectionsPerDay[day].Remove(i);
            }

            exercisesFilterManager.RemoveItemFromList(exerciseDTO, listStoringSelectedExercises);
            listOfExercisesByWorkoutType.Add(exerciseDTO); // I believe we are already doing this somethingwhere. This should do the trick for now but we really not the find where the exercise is getting readded and use that.
            DictionaryStoringFilteredExercises[exercise.WorkoutType][exercise.ExerciseType].RemoveAll(e => e.Name == exerciseName); // Might need to add some exception handling around here.
            UpdateSelectableExerciseListForEachUserExercise(DictionaryStoringFilteredExercises, ListOfUserExercisePerDay[day], exercise);
        }

        RemoveAdditionalExerciseFromWorkout(day, id);
        StateHasChanged();
    }

    public ExerciseDTO GetExerciseDTOFromListStoringSelectedExercises(string name)
    {
        ExerciseDTO previouslySelectedExerciseDTO = listStoringSelectedExercises
            .Find(e => e.Name == name);
        return previouslySelectedExerciseDTO;
    }
    private void PutSelectedExercisesInSelectedList(Dictionary<string, List<UserExercise>> dictionary,List<ExerciseDTO> listStoringSelectedExercises,List<ExerciseDTO> fullList)
    {
        foreach (var dayEntry in dictionary)
        {
            string day = dayEntry.Key;
            List<UserExercise> exercisesForDay = dayEntry.Value;

            if (exercisesForDay == null)
                continue;

            foreach (UserExercise userExercise in exercisesForDay)
            {
                if (userExercise == null || string.IsNullOrWhiteSpace(userExercise.Name))
                    continue;


                List<ExerciseDTO> matchingExercises = fullList
                    .FindAll(e => e.Name.Equals(userExercise.Name, StringComparison.OrdinalIgnoreCase));

                listStoringSelectedExercises.AddRange(matchingExercises);
            }
        }
    }
    private void RemoveSelectedExercisesFromFullList(Dictionary<string, List<UserExercise>> dictionary, List<ExerciseDTO> fullListOfExerciseDTO)
    {
        foreach (string day in daysOfWeek)
        {
            List<ExerciseDTO> exerciseList = new();
            foreach(UserExercise exercise in dictionary[day])
            {
                fullListOfExerciseDTO.RemoveAll(e => e.Name == exercise.Name);
            }
        } 
    }
    public void AddExerciseNamesToPreviousSelections()
    {
        foreach (var dayEntry in ListOfUserExercisePerDay)
        {
            string day = dayEntry.Key; // Get the day of the week
            List<UserExercise> exercisesForDay = dayEntry.Value;

            if (exercisesForDay == null || !previousExerciseSelectionsPerDay.ContainsKey(day))
                continue;

            // Get the target dictionary for the day
            var previousSelectionsForDay = previousExerciseSelectionsPerDay[day];

            // Add all exercise names with a unique key
            foreach (var userExercise in exercisesForDay)
            {
                if (userExercise == null || string.IsNullOrWhiteSpace(userExercise.Name))
                    continue;

             // I really don't intuitively understand what this is doing but we are going to roll with it and come back later if we need to.
                int newKey = previousSelectionsForDay.Count > 0
                    ? previousSelectionsForDay.Keys.Max() + 1
                    : 0;

                previousSelectionsForDay[newKey] = userExercise.Name;
            }
        }
    }
    public void MapUserExercisesToFilteredDictionary(Dictionary<string, List<UserExercise>> listOfUserExercisePerDay,List<ExerciseDTO> fullListOfExerciseDTO,Dictionary<WorkoutType, Dictionary<ExerciseType, List<ExerciseDTO>>> dictionaryStoringFilteredExercises)
    {
        foreach (var dayEntry in listOfUserExercisePerDay)
        {
            var userExercises = dayEntry.Value;

            foreach (var userExercise in userExercises)
            {
                if (userExercise == null || string.IsNullOrWhiteSpace(userExercise.Name))
                    continue;

                var matchingExerciseDTO = fullListOfExerciseDTO
                    .FirstOrDefault(dto => dto.Name.Equals(userExercise.Name, StringComparison.OrdinalIgnoreCase));

                if (matchingExerciseDTO == null)
                    continue;

                if (!dictionaryStoringFilteredExercises.ContainsKey(userExercise.WorkoutType))
                    continue;

                var exerciseTypeDictionary = dictionaryStoringFilteredExercises[userExercise.WorkoutType];

                if (!exerciseTypeDictionary.ContainsKey(userExercise.ExerciseType))
                    continue;

                exerciseTypeDictionary[userExercise.ExerciseType].Add(matchingExerciseDTO);
            }
        }
    }
    private void MapUserExercisesToDay(List<UserWorkout> workoutsList, Dictionary<string, List<UserExercise>> dictionaryForPlan, string[] daysInWeek)
    {
        int dayCount = 0;

        foreach (var workout in workoutsList)
        {
            if (dayCount < daysInWeek.Length)
            {
                dictionaryForPlan[daysInWeek[dayCount]] = workout.UserExercises?.ToList() ?? new List<UserExercise>();
                dayCount++;
            }
        }
    }
    private void SyncExerciseCountWithDays(List<UserWorkout> workoutsList,Dictionary<string, int> userExerciseCount,string[] daysInWeek)
    {
        int dayCount = 0;

        foreach (var workout in workoutsList)
        {
            if (dayCount < daysInWeek.Length)
            {
                int exerciseCount = workout.UserExercises?.Count ?? 0;
                userExerciseCount[daysInWeek[dayCount]] = exerciseCount;
                dayCount++;
            }
        }
    }
    public void AddEditedUserExerciseIdToTrackedListOfEditedIds(int id)
    {
        TrackedListOfEditedExerciseIds.Add(id);
        TrackedListOfEditedExerciseIds.Sort();
    }
    public void AddRemovedUserExerciseIdToTrackedListOfDeletedIds(int id)
    {
        TrackedListOfDeletedExerciseIds.Add(id);
        TrackedListOfDeletedExerciseIds.Sort();
    }


    private async Task UpdatePlanAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                plan.ApplicationUserId = userId;
            }

            var transaction = await ApplicationDbContext.Database.BeginTransactionAsync();
            try
            {
                await userExerciseRepository.PersistUpdatedListOfUserWorkoutsToDatabaseAsync(workoutListForCurrentPlan, TrackedListOfEditedExerciseIds, TrackedListOfDeletedExerciseIds);

                await transaction.CommitAsync();
                plan = new Plan();
                NavManager.NavigateTo($"/");
            }
            catch (Exception e)
            {
                await transaction.RollbackAsync();
                throw new Exception($"Something went wrong with the database transaction: {e.Message}");
            }
        }
        StateHasChanged();
    }
    public void PutExerciseIdInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        try
        {
            var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
            userExercise.ExerciseId = filteredExercise.ExerciseId;
        }
        catch(NullReferenceException e)
        {
            Console.WriteLine("Please select an exercise from the list: {0}", e.Message);
        }
    }
    public void PutWorkoutTypeInUserExerciseBasedOnName(UserExercise userExercise,string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
        userExercise.WorkoutType = filteredExercise.WorkoutType;
    }
    public void PutExerciseTypeInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault(); // Really this should be put into its own method
        userExercise.ExerciseType = filteredExercise.ExerciseType;
    }
    public void PutVideoUrlInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault(); // Really this should be put into its own method
        userExercise.VideoUrl = filteredExercise.VideoUrl;
    }
    private string GetWorkoutSummary(string day)
    {
        if (ListOfUserExercisePerDay.TryGetValue(day, out var exercises) && exercises.Any())
        {
            return "";
        }
        return "No Exercises Added.";
    }
    public string GetWorkoutTypeByDay(string day)
    {
        if (ListOfUserExercisePerDay.TryGetValue(day, out var userWorkout) && userWorkout?.Any() == true)
        {
            var userExercise = userWorkout.FirstOrDefault();
            if (userExercise != null)
            {
                var enumValue = userExercise.WorkoutType;
                switch (enumValue)
                {
                    case WorkoutType.UpperBodyStrength:
                        return "Upper Body";

                    case WorkoutType.LowerBodyStrength:
                        return "Lower Body";

                    default:
                        return "Workout Type";
                }
            }
        }
        return "Err";
    }
    private void RemoveAdditionalExerciseFromWorkout(string day, int id)
    {
        UserExerciseTotalCountPerDay[day] -= 1;
        listOfUserExercisesInSelectedDay.RemoveAt(listOfUserExercisesInSelectedDay.Count - 1);
        AddRemovedUserExerciseIdToTrackedListOfDeletedIds(id);
        StateHasChanged();
    }
    private void AddAdditionalExerciseToWorkout(string day)
    {
        if (UserExerciseTotalCountPerDay[day] < 8)
        {
            UserExerciseTotalCountPerDay[day] += 1;
            StateHasChanged();
        }
    }
    public void UpdateSelectableExerciseListForEachUserExercise(Dictionary<WorkoutType, Dictionary<ExerciseType, List<ExerciseDTO>>> dictionaryWithSelectedExercises,List<UserExercise> listOfUserExercisesForDay)
    {
        if (listOfUserExercisesForDay.Count == 0)
            return;

        foreach (UserExercise userExercise in listOfUserExercisesForDay)
        {
            UpdateFilteredExercisesForUserExercise(dictionaryWithSelectedExercises, userExercise);
        }

        StateHasChanged();
    }
    public void BindValuesFromDTOToUserExercise(UserExercise userExercise,string name,List<ExerciseDTO> listOfExercisesToFilterOn,string day,int j)
    {
        userSelectedExerciseInDayView = true;

        if (UserClickCountPerDay[day] < 3)
        {
            UserClickCountPerDay[day]++;
        }
        AddEditedUserExerciseIdToTrackedListOfEditedIds(userExercise.Id);
        PutExerciseIdInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutExerciseTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutWorkoutTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutVideoUrlInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);

        RemoveSelectedExerciseFromAvailableList(name, day, j);
        RemoveExerciseFromExerciseListFilteredByWorkoutType(name, listOfExercisesToFilterOn, j, day);
        UpdateListOfPreviouslySelectedExercisesForSelectedDay(
            j, day, name, userExercise.WorkoutType, userExercise.ExerciseType);

        PutSelectedExercisesInFilteredBin(ListOfUserExercisePerDay, day);
        UpdateSelectableExerciseListForEachUserExercise(
            DictionaryStoringFilteredExercises,
            listOfUserExercisesInSelectedDay,
            userExercise);

        StateHasChanged();
    }
    private void UpdateFilteredExercisesForUserExercise(Dictionary<WorkoutType, Dictionary<ExerciseType, List<ExerciseDTO>>> dictionaryWithSelectedExercises,UserExercise userExercise)
    {
        WorkoutType workoutType = userExercise.WorkoutType;
        ExerciseType exerciseType = userExercise.ExerciseType;
        string selectedExerciseName = userExercise.Name;

        var exercisesToRemove = userExercise.FilteredExercises
            .Where(exercise => exercise.Name != selectedExerciseName &&
                dictionaryWithSelectedExercises[workoutType][exerciseType]
                    .Any(selectedExercise => selectedExercise.Name == exercise.Name))
            .ToList();

        var exercisesToAdd = ExercisesToAddToFilteredUserExerciseLists(userExercise);

        exercisesFilterManager.RemoveItemsFromList(exercisesToRemove, userExercise.FilteredExercises);
        exercisesFilterManager.AddItemsToList(exercisesToAdd, userExercise.FilteredExercises);

        var selectedExercise = userExercise.FilteredExercises
            .FirstOrDefault(e => e.Name == selectedExerciseName);

        if (selectedExercise != null)
        {
            userExercise.FilteredExercises.Remove(selectedExercise);
            userExercise.FilteredExercises.Insert(0, selectedExercise);
        }
    }

    private List<ExerciseDTO> ExercisesToAddToFilteredUserExerciseLists(UserExercise userExercise)
    {
        return fullListOfExerciseDTO
            .Where(dto => dto.WorkoutType == userExercise.WorkoutType &&
                          dto.ExerciseType == userExercise.ExerciseType &&
                          !userExercise.FilteredExercises.Any(filtered => filtered.Name == dto.Name))
            .ToList();
    }
    public void UpdateListOfPreviouslySelectedExercisesForSelectedDay(int j,string selectedDay,string name,WorkoutType workoutType,ExerciseType exerciseType)
    {
        if (previousExerciseSelectionsPerDay[selectedDay][j] != name)
        {
            ExerciseDTO previouslySelectedExerciseDTO = listStoringSelectedExercises
                .Find(e => e.Name == previousExerciseSelectionsPerDay[selectedDay][j]);

            fullListOfExerciseDTO.Add(previouslySelectedExerciseDTO);
            listStoringSelectedExercises.Remove(previouslySelectedExerciseDTO);
            DictionaryStoringFilteredExercises[workoutType][exerciseType]
                .RemoveAll(e => e.Name == previouslySelectedExerciseDTO.Name);

            previousExerciseSelectionsPerDay[selectedDay][j] = name;
        }
    }
    public void RemoveSelectedExerciseFromAvailableList(string exerciseName, string day, int j)
    {
        ExerciseDTO dto = fullListOfExerciseDTO.Find(e => e.Name == exerciseName);
        exercisesFilterManager.AddItemToList(dto, listStoringSelectedExercises);

        fullListOfExerciseDTO.RemoveAll(e => e.Name == exerciseName);

        if (!previousExerciseSelectionsPerDay[day].ContainsKey(j))
        {
            previousExerciseSelectionsPerDay[day].Add(j, exerciseName);
        }

        StateHasChanged();
    }
    private void RemoveExerciseFromExerciseListFilteredByWorkoutType(string name,List<ExerciseDTO> filteredExerciseList,int j,string day)
    {
        filteredExerciseList.RemoveAll(e => e.Name == name);

        if (previousExerciseSelectionsPerDay[day][j] != name)
        {
            ExerciseDTO exerciseDTO = listStoringSelectedExercises
                .Find(e => e.Name == previousExerciseSelectionsPerDay[day][j]);

            exercisesFilterManager.AddItemToList(exerciseDTO, filteredExerciseList);
        }

        StateHasChanged();
    }

    






    
  
    
    



    
    

    
    
    
}
