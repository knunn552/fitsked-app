@page "/edit-plan/{planName}/{planId:int}"
@using FitskedApp.DTO
@using FitskedApp.Data
@using FitskedApp.Models
@using FitskedApp.Utilities
@using FitskedApp.Data.Repository
@using FitskedApp.Data.Service
@rendermode InteractiveServer
@inject IUserPlanRepository planRepository
@inject IUserExerciseRepository userExerciseRepository
@inject IUserWorkoutRepository userWorkoutRepository
@inject IExerciseService exerciseService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext ApplicationDbContext
@inject NavigationManager NavManager
@inject NavigationLinks NavigationLinks

<PageTitle> Edit Plan </PageTitle>



    <div class="@((displayDayViewWorkout ? "blurred" : ""))">
        <div class="d-flex justify-content-center">
        <h1 class="poppins-bold text-primary pt-5 fs-1 text-black"> @PlanName</h1>
        </div>

    <div class="row border-4 rounded-div border border-warning p-3 bg-white w-auto mb-2 inner-input-shadow">
        @foreach (var day in daysOfWeek)
        {
            if (DictionaryOfListOfUserExerciseForSelectedDay.TryGetValue(day, out var exercises))
            {
                <div class="col text-center mt-2 mb-2 m-lg-2 day-card rounded-div mr-1 rounded-div border border-3 border-danger ps-2 pe-2"
                     @onclick="() => { if (!displayDayViewWorkout) UserSelectsDay(day); }">
                    <h5 class="mt-2 poppins-medium"> @day </h5>
                    <hr />
                    <div class="pt-1">
                        <p class="poppins-bold">  @GetWorkoutTypeByDay(day) </p>
                        <table class="table table-striped table-bordered table-sm table-extra-small-font rounded-div">
                            <thead>
                                <tr>
                                    <th scope="col">Exercise</th>
                                    <th scope="col">Sets</th>
                                    <th scope="col">Reps</th>
                                    <th scope="col">Weight</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var userExercise in exercises)
                                {
                                    <tr>
                                        <td>@userExercise.Name</td>
                                        <td>@userExercise.Sets</td>
                                        <td>@userExercise.Repetitions</td>
                                        <td>@userExercise.Weight</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <p class="poppins-medium exercise-summary-font"> @GetWorkoutSummary(day) </p>
                    </div>
                </div>
            }
            else
            {
                <div class="col text-center mt-2 mb-2 m-lg-2 day-card rounded-div mr-1 rounded-div border border-3 border-danger ps-2 pe-2">
                    <h5 class="mt-2 poppins-medium"> @day </h5>
                    <p class="poppins-medium exercise-summary-font"> No exercises for this day. </p>
                </div>
            }
        }
    </div>


    <div>
        <div class="d-flex justify-content-center mt-3">
            <button class="rounded-pill w-25 mb-2 poppins-medium border border-3 border-danger bg-white p-2 main-button" @onclick="NavigationLinks.GoToAddPlanPage"> Add New Plan </button>
        </div>
    </div>
    <div>
        <div class="d-flex justify-content-center mt-3">
        <button class="rounded-pill w-25 mb-2 poppins-medium border border-3 border-danger bg-white p-2 main-button" @onclick="() => { if (!displayDayViewWorkout) UpdatePlanAsync();}"> Update Plan </button>
        </div>
    </div>
    </div>


@if(displayDayViewWorkout)
{
    <div class="overlay">
        <div class="d-flex justify-content-center">
            <div class="bg-white rounded-div w-75 border border-4 border-danger shadow-sm mb-3 mt-4 day-view-modal">
                <div class="d-flex justify-content-center">
                    <h5 class="mt-2 poppins-bold">@selectedDay</h5>
                </div>
                <hr class="border border-2 border-danger" />
                <div class="container d-flex justify-content-center">
                    <EditForm Model="userExercise">
                        <DataAnnotationsValidator />

                        @if ((userSelectedWorkoutTypeInDayView == false) && (DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[selectedDay] != 1))
                        {
                            <div class="d-flex justify-content-center pt-2">
                                <p> <span class="poppins-bold" style="color:red"> IMPORTANT: </span> To load existing workout, reselect <span class="poppins-bold"> @GetWorkoutTypeByDay(selectedDay) </span>. To change workout type, pick a new one and start fresh. </p>
                            </div>
                            <div class="d-flex justify-content-center">
                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height justify-content-center d-flex w-50 text-center blinking-border" id="workoutType" @bind-Value="userExercise.WorkoutType" @bind-Value:after="() => FilterListOfWorkoutTypeByExerciseTypeAsync(selectedDay)">
                                    @foreach (var type in Enum.GetValues(typeof(WorkoutType)).Cast<WorkoutType>().Take(3))
                                    {
                                        if (type == WorkoutType.FillerValue)
                                        {
                                            <option value="@type" disabled selected>@StringValuesForWorkoutType[type]</option>
                                        }
                                        else
                                        {
                                            <option value="@type">@StringValuesForWorkoutType[type]</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex justify-content-center">
                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height justify-content-center d-flex w-50 text-center" id="workoutType" @bind-Value="userExercise.WorkoutType" @bind-Value:after="() => FilterListOfWorkoutTypeByExerciseTypeAsync(selectedDay)">
                                    @foreach (var type in Enum.GetValues(typeof(WorkoutType)).Cast<WorkoutType>().Take(3))
                                    {
                                        if (type == WorkoutType.FillerValue)
                                        {
                                            <option value="@type" disabled selected hidden>@StringValuesForWorkoutType[type]</option>
                                        }
                                        else
                                        {
                                            <option value="@type">@StringValuesForWorkoutType[type]</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        }


                        @for (int i = 0; i < NumberOfUserExercisesInWorkoutForSelectedDay[selectedDay]; i++)
                        {
                            var j = i;
                            if (j >= listOfUserExercisesInSelectedDay.Count)
                            {
                                listOfUserExercisesInSelectedDay.Add(new UserExercise());
                            }

                            <div class="d-flex justify-content-center mb-2">

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-3 text-center" id="exerciseType" @bind-Value="listOfUserExercisesInSelectedDay[j].ExerciseType" @bind-Value:after="() => GetListOfIndividualExercisesFromListOfExerciseType(j)">
                                    @foreach (var type in Enum.GetValues(typeof(ExerciseType)).Cast<ExerciseType>().Take(4))
                                    {
                                        if (type == ExerciseType.FillerValue)
                                        {
                                            <option value="@type" disabled selected hidden>@StringValuesForExerciseType[type]</option>
                                        }
                                        else
                                        {
                                            <option value="@type">@StringValuesForExerciseType[type]</option>
                                        }
                                    }
                                </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-4 text-center" id="exerciseName" @bind-Value="listOfUserExercisesInSelectedDay[j].Name" @bind-Value:after="() => BindValuesFromDtoToUserExercise(listOfUserExercisesInSelectedDay[j],listOfUserExercisesInSelectedDay[j].Name,listOfExercisesByWorkoutType)">
                                    <option value="" disabled selected> -- Select Exercise -- </option>
                                    @foreach (var exercise in listOfUserExercisesInSelectedDay[j].FilteredExercises)
                                    {
                                        <option value="@exercise.Name">@exercise.Name</option>
                                    }
                                </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-1 text-center" id="sets" @bind-Value="listOfUserExercisesInSelectedDay[j].Sets">
                                    <option value="" disabled selected> -- Sets -- </option>
                                    @foreach (var setNumber in ListOfSets)
                                    {
                                        <option value="@setNumber">@setNumber</option>
                                    }
                                </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-1 text-center" id="reps" @bind-Value="listOfUserExercisesInSelectedDay[j].Repetitions">
                                    <option value="" disabled selected> -- Reps -- </option>
                                    @foreach (var repNumber in ListOfReps)
                                    {
                                        <option value="@repNumber">@repNumber</option>
                                    }
                                </InputSelect>

                                <InputSelect class="rounded-pill bg-white inner-input-shadow mt-2 user-exercise-select-height col-2 text-center" id="weight" @bind-Value="listOfUserExercisesInSelectedDay[j].Weight">
                                    <option value="" disabled selected> -- Weight -- </option>
                                    @foreach (var weightNumber in ListOfWeight)
                                    {
                                        <option value="@weightNumber">@weightNumber lbs.</option>
                                    }
                                </InputSelect>

                                @if ((j > 0) && (j == NumberOfUserExercisesInWorkoutForSelectedDay[selectedDay] - 1))
                                {
                                    <button class=" end-0 me-5 mt-2 rounded-pill border border-2 border-danger poppins-medium bg-white user-exercise-select-height col-2" @onclick="() => RemoveAdditionalExerciseFromWorkout(selectedDay, listOfUserExercisesInSelectedDay[j].Id)">
                                        Remove
                                    </button>
                                }
                            </div>
                        }
                        <div>
                            <button class="mt-3 rounded-pill mb-4 border border-2 border-danger poppins-medium bg-white main-button p-2" @onclick="() =>  AddAdditionalExerciseToWorkout(selectedDay)">
                                Add Exercise
                            </button>
                        </div>

                        <div class="d-flex justify-content-center">
                            <button class="mt-3 rounded-pill mb-4 border border-2 border-danger poppins-medium bg-white main-button p-2" @onclick="SaveUserWorkoutToInMemoryListOfUserWorkouts">Save Workout</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    
}

@code {

    [Parameter]
    public string PlanName { get; set; }

    [Parameter]
    public int PlanId { get; set; }

    private Plan plan = new();
    private UserExercise userExercise = new();
    public WorkoutType workoutType = new();
    private List<UserWorkout> workoutListForCurrentPlan = new(); // This is what we'll use to retrive the current list of userworkouts for the specific planid that were working with
    private List<UserExercise> listOfUserExercisesInSelectedDay = new();
    private string[] daysOfWeek = new string[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
    private int numberOfExercisesInWorkout = 2;

    private bool userSelectedWorkoutTypeInDayView = false;


    private List<int> TrackedListOfEditedExerciseIds = new();
    private List<int> TrackedListOfDeletedExerciseIds = new();

    private Dictionary<string, List<UserExercise>> DictionaryOfListOfUserExerciseForSelectedDay = new(); // Need this to populate a list of user exercises for a given workout/day
    private string selectedDay = string.Empty;

    private Dictionary<string, int> DictionaryStoringListPositionOfSelectedDay = new Dictionary<string, int>
{
    { "Sunday", 0 },
    { "Monday", 1 },
    { "Tuesday", 2 },
    { "Wednesday", 3 },
    { "Thursday", 4 },
    { "Friday", 5 },
    { "Saturday", 6 }
};

    public Dictionary<string, int> NumberOfUserExercisesInWorkoutForSelectedDay = new Dictionary<string, int>
    {
        { "Sunday", 1},
        { "Monday", 1 },
        { "Tuesday", 1},
        { "Wednesday", 1},
        { "Thursday", 1 },
        { "Friday", 1},
        { "Saturday", 1}
    };

    public Dictionary<string, int> DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff = new Dictionary<string, int>
    {
        { "Sunday", 0},
        { "Monday", 0},
        { "Tuesday", 0},
        { "Wednesday", 0},
        { "Thursday", 0},
        { "Friday", 0},
        { "Saturday", 0}
    };

    private bool displayDayViewWorkout = false; // This needs to be kept to obviously populate the day view
    public List<ExerciseDTO> listOfExercisesByWorkoutType = new();


    private static readonly Dictionary<WorkoutType, string> StringValuesForWorkoutType = new()
    {
            {WorkoutType.FillerValue, " -- Workout Type -- "},
            {WorkoutType.UpperBodyStrength, "Upper Body" },
            {WorkoutType.LowerBodyStrength, "Lower Body" }
    };

    private static readonly Dictionary<ExerciseType, string> StringValuesForExerciseType = new()
    {
        {ExerciseType.FillerValue, " -- Exercise Type -- "},
        {ExerciseType.Core, "Core"},
        {ExerciseType.Secondary, "Secondary"},
        {ExerciseType.Accessory, "Accessory"}
    };

    private List<int> ListOfSets = ListOfNumberHelper.GenerateListOfNumbers(1, 10, 1);
    private List<int> ListOfReps = ListOfNumberHelper.GenerateListOfNumbers(2, 20, 2);
    private List<int> ListOfWeight = ListOfNumberHelper.GenerateListOfNumbers(5, 405, 5);

    protected override async Task OnInitializedAsync()
    {
        plan = planRepository.GetPlanById(PlanId);
        workoutListForCurrentPlan = await userWorkoutRepository.GetListOfUserWorkoutsByPlanIdAsync(PlanId);



        foreach (var day in daysOfWeek)
        {
            if (!DictionaryOfListOfUserExerciseForSelectedDay.ContainsKey(day))
            {
                DictionaryOfListOfUserExerciseForSelectedDay[day] = new List<UserExercise>();
            }
        }

        PlaceListOfUserExercisesInDictionaryForAssociatedDay(workoutListForCurrentPlan, DictionaryOfListOfUserExerciseForSelectedDay, daysOfWeek);
        UpdateNumberOfUserExercisesInWorkoutForSelectedDay(workoutListForCurrentPlan, NumberOfUserExercisesInWorkoutForSelectedDay, daysOfWeek);
    }

    private void UpdateNumberOfUserExercisesInWorkoutForSelectedDay(
    List<UserWorkout> workoutsList,
    Dictionary<string, int> userExerciseCount,
    string[] daysInWeek)
    {
        int dayCount = 0;

        foreach (var workout in workoutsList)
        {
            if (dayCount < daysInWeek.Length)
            {
                // Get the count of exercises for the current workout, or 0 if null
                int exerciseCount = workout.UserExercises?.Count ?? 0;

                // Update the count for the corresponding day
                userExerciseCount[daysInWeek[dayCount]] = exerciseCount;

                dayCount++;
            }
        }
    }


    private void AddAdditionalExerciseToWorkout(string day)
    {
        if (NumberOfUserExercisesInWorkoutForSelectedDay[day] < 8)
        {
            NumberOfUserExercisesInWorkoutForSelectedDay[day] += 1;
            StateHasChanged();
        }
    }

    private void RemoveAdditionalExerciseFromWorkout(string day, int id)
    {
        NumberOfUserExercisesInWorkoutForSelectedDay[day] -= 1;
        listOfUserExercisesInSelectedDay.RemoveAt(listOfUserExercisesInSelectedDay.Count - 1);
        AddRemovedUserExerciseIdToTrackedListOfDeletedIds(id);
        StateHasChanged();
    }

    public void AddEditedUserExerciseIdToTrackedListOfEditedIds(int id)
    {
        TrackedListOfEditedExerciseIds.Add(id);
        TrackedListOfEditedExerciseIds.Sort();
    }

    public void AddRemovedUserExerciseIdToTrackedListOfDeletedIds(int id)
    {
        TrackedListOfDeletedExerciseIds.Add(id);
        TrackedListOfDeletedExerciseIds.Sort();
    }


    private void PlaceListOfUserExercisesInDictionaryForAssociatedDay(List<UserWorkout> workoutsList, Dictionary<string, List<UserExercise>> dictionaryForPlan, string[] daysInWeek)
    {
        int dayCount = 0;

        foreach (var workout in workoutsList)
        {
            if (dayCount < daysInWeek.Length)
            {
                dictionaryForPlan[daysInWeek[dayCount]] = workout.UserExercises?.ToList() ?? new List<UserExercise>();
                dayCount++;
            }
        }
    }


    private void UserSelectsDay(string day)
    {
        if (DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[day] < 1)
        {
            userExercise.WorkoutType = WorkoutType.FillerValue;
        }
        
        
        selectedDay = day;
        listOfUserExercisesInSelectedDay = DictionaryOfListOfUserExerciseForSelectedDay[day];
        numberOfExercisesInWorkout = listOfUserExercisesInSelectedDay.Count;
        displayDayViewWorkout = true;
    }



    private void SaveUserWorkoutToInMemoryListOfUserWorkouts()
    {
        userSelectedWorkoutTypeInDayView = false;
        if (DictionaryStoringListPositionOfSelectedDay.ContainsKey(selectedDay))
        {
            DictionaryOfListOfUserExerciseForSelectedDay[selectedDay] = listOfUserExercisesInSelectedDay;

            int dayIndex = DictionaryStoringListPositionOfSelectedDay[selectedDay];

            var updatedWorkoutId = workoutListForCurrentPlan[dayIndex].Id;
            workoutListForCurrentPlan.RemoveAt(dayIndex);

            UserWorkout userWorkout = new UserWorkout
                {
                    PlanId = plan.Id,
                    Id = updatedWorkoutId,
                    UserExercises = listOfUserExercisesInSelectedDay
                };

            workoutListForCurrentPlan.Insert(dayIndex, userWorkout);
            displayDayViewWorkout = false;
        }
    }

    public string GetWorkoutTypeByDay(string day)
    {
        if (DictionaryOfListOfUserExerciseForSelectedDay.TryGetValue(day, out var userWorkout) && userWorkout?.Any() == true)
        {
            var userExercise = userWorkout.FirstOrDefault();
            if (userExercise != null)
            {
                var enumValue = userExercise.WorkoutType;
                switch (enumValue)
                {
                    case WorkoutType.UpperBodyStrength:
                        return "Upper Body";

                    case WorkoutType.LowerBodyStrength:
                        return "Lower Body";

                    default:
                        return "Nothing going on today";
                }
            }
        }
        return "Err";
    }

    private string GetWorkoutSummary(string day)
    {
        if (DictionaryOfListOfUserExerciseForSelectedDay.TryGetValue(day, out var exercises) && exercises.Any())
        {
            return "";
        }
        return "No Exercises Added.";
    }

    private async Task UpdatePlanAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                plan.ApplicationUserId = userId;
            }

            var transaction = await ApplicationDbContext.Database.BeginTransactionAsync();
            try
            {
                await userExerciseRepository.PersistUpdatedListOfUserWorkoutsToDatabaseAsync(workoutListForCurrentPlan, TrackedListOfEditedExerciseIds, TrackedListOfDeletedExerciseIds);

                await transaction.CommitAsync();
                plan = new Plan();
                NavManager.NavigateTo($"/");
            }
            catch (Exception e)
            {
                await transaction.RollbackAsync();
                throw new Exception($"Something went wrong with the database transaction: {e.Message}");
            }
        }
        StateHasChanged();
    }



    public async Task FilterListOfWorkoutTypeByExerciseTypeAsync(string day)
    {
        userSelectedWorkoutTypeInDayView = true;
        if (DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[day] < 1)
        {
            DictionaryToTrackNumberOfSelectionsDuringDayViewToTurnOnBlinkingInputsAfterFirstRoundOfSelectionPerDayOff[day]++;
        }
        listOfExercisesByWorkoutType = await exerciseService.GetExerciseListAsync(userExercise.WorkoutType); // This method replaced the original method that was retrieving the List Of Exercises from the Web App Db
                                                                                                             // listOfExercisesByWorkoutType = await userExerciseRepository.GetExercisesBasedOnWorkoutType(userExercise.WorkoutType);
        foreach (var exercise in listOfUserExercisesInSelectedDay)
        {
            exercise.FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, exercise.ExerciseType);
        }
        StateHasChanged();
    }



    public async Task GetListOfIndividualExercisesFromListOfExerciseType(int index)
    {
        var selectedExerciseType = listOfUserExercisesInSelectedDay[index].ExerciseType;
        listOfUserExercisesInSelectedDay[index].FilteredExercises = userExerciseRepository.GetExercisesFromWorkoutListBasedOnExerciseType(listOfExercisesByWorkoutType, selectedExerciseType);
        await InvokeAsync(StateHasChanged);
    }

    public void PutExerciseIdInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        try
        {
            var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
            userExercise.ExerciseId = filteredExercise.ExerciseId;
        }
        catch(NullReferenceException e)
        {
            Console.WriteLine("Please select an exercise from the list: {0}", e.Message);
        }
    }

    public void PutWorkoutTypeInUserExerciseBasedOnName(UserExercise userExercise,string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault();
        userExercise.WorkoutType = filteredExercise.WorkoutType;
    }

    public void PutExerciseTypeInUserExerciseBasedOnName(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        var filteredExercise = listOfExercisesToFilterOn.Where(e => e.Name == name).FirstOrDefault(); // Really this should be put into its own method
        userExercise.ExerciseType = filteredExercise.ExerciseType;
    }

    public void BindValuesFromDtoToUserExercise(UserExercise userExercise, string name, List<ExerciseDTO> listOfExercisesToFilterOn)
    {
        AddEditedUserExerciseIdToTrackedListOfEditedIds(userExercise.Id);
        PutExerciseIdInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutExerciseTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
        PutWorkoutTypeInUserExerciseBasedOnName(userExercise, name, listOfExercisesToFilterOn);
    } 
}
